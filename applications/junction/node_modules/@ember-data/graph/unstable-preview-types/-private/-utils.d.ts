declare module '@ember-data/graph/-private/-utils' {
  import type { Store } from '@ember-data/store/-private';
  import type { CacheCapabilitiesManager } from '@ember-data/store/types';
  import type { StableRecordIdentifier } from '@warp-drive/core-types';
  import type { UpdateResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';
  import type { UpdateRelationshipOperation } from '@warp-drive/core-types/graph';
  import type { ResourceIdentifierObject } from '@warp-drive/core-types/spec/json-api-raw';
  import type { UpgradedMeta } from '@ember-data/graph/-private/-edge-definition';
  import type { CollectionEdge } from '@ember-data/graph/-private/edges/collection';
  import type { ImplicitEdge } from '@ember-data/graph/-private/edges/implicit';
  import type { ResourceEdge } from '@ember-data/graph/-private/edges/resource';
  import type { Graph, GraphEdge } from '@ember-data/graph/-private/graph';
  export function getStore(wrapper: CacheCapabilitiesManager | {
      _store: Store;
  }): Store;
  export function expandingGet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string): T | undefined;
  export function expandingSet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string, value: T): void;
  export function assertValidRelationshipPayload(graph: Graph, op: UpdateRelationshipOperation | UpdateResourceRelationshipOperation): void;
  export function isNew(identifier: StableRecordIdentifier): boolean;
  export function isBelongsTo(relationship: GraphEdge): relationship is ResourceEdge;
  export function isImplicit(relationship: GraphEdge): relationship is ImplicitEdge;
  export function isHasMany(relationship: GraphEdge): relationship is CollectionEdge;
  export function forAllRelatedIdentifiers(rel: GraphEdge, cb: (identifier: StableRecordIdentifier) => void): void;
  export function removeIdentifierCompletelyFromRelationship(graph: Graph, relationship: GraphEdge, value: StableRecordIdentifier, silenceNotifications?: boolean): void;
  export function notifyChange(graph: Graph, relationship: CollectionEdge | ResourceEdge): void;
  export function assertRelationshipData(store: Store, identifier: StableRecordIdentifier, data: ResourceIdentifierObject, meta: UpgradedMeta): void;
}
//# sourceMappingURL=-utils.d.ts.map