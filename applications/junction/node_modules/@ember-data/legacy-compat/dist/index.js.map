{"version":3,"file":"index.js","sources":["../src/legacy-network-handler/legacy-data-fetch.ts","../src/legacy-network-handler/legacy-network-handler.ts","../src/index.ts"],"sourcesContent":["import type Store from '@ember-data/store';\nimport type { BaseFinderOptions } from '@ember-data/store/types';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { LegacyRelationshipField as RelationshipSchema } from '@warp-drive/core-types/schema/fields';\nimport type { ExistingResourceObject, JsonApiDocument } from '@warp-drive/core-types/spec/json-api-raw';\n\nimport { upgradeStore } from '../-private';\nimport { iterateData, payloadIsNotBlank } from './legacy-data-utils';\nimport type { MinimumAdapterInterface } from './minimum-adapter-interface';\nimport { normalizeResponseHelper } from './serializer-response';\n\nexport function _findHasMany(\n  adapter: MinimumAdapterInterface,\n  store: Store,\n  identifier: StableRecordIdentifier,\n  link: string | null | { href: string },\n  relationship: RelationshipSchema,\n  options: BaseFinderOptions\n) {\n  upgradeStore(store);\n  const promise = Promise.resolve().then(() => {\n    const snapshot = store._fetchManager.createSnapshot(identifier, options);\n    const useLink = !link || typeof link === 'string';\n    const relatedLink = useLink ? link : link.href;\n    assert(\n      `Attempted to load a hasMany relationship from a specified 'link' in the original payload, but the specified link is empty. You must provide a valid 'link' in the original payload to use 'findHasMany'`,\n      relatedLink\n    );\n    assert(\n      `Expected the adapter to implement 'findHasMany' but it does not`,\n      typeof adapter.findHasMany === 'function'\n    );\n    return adapter.findHasMany(store, snapshot, relatedLink, relationship);\n  });\n\n  return promise.then((adapterPayload) => {\n    assert(\n      `You made a 'findHasMany' request for a ${identifier.type}'s '${\n        relationship.name\n      }' relationship, using link '${JSON.stringify(link)}' , but the adapter's response did not have any data`,\n      payloadIsNotBlank(adapterPayload)\n    );\n    const modelClass = store.modelFor(relationship.type);\n\n    const serializer = store.serializerFor(relationship.type);\n    let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findHasMany');\n\n    assert(\n      `fetched the hasMany relationship '${relationship.name}' for ${identifier.type}:${\n        identifier.id\n      } with link '${JSON.stringify(\n        link\n      )}', but no data member is present in the response. If no data exists, the response should set { data: [] }`,\n      'data' in payload && Array.isArray(payload.data)\n    );\n\n    payload = syncRelationshipDataFromLink(store, payload, identifier as ResourceIdentity, relationship);\n    return store._push(payload, true);\n  }, null);\n}\n\nexport function _findBelongsTo(\n  store: Store,\n  identifier: StableRecordIdentifier,\n  link: string | null | { href: string },\n  relationship: RelationshipSchema,\n  options: BaseFinderOptions\n) {\n  upgradeStore(store);\n  const promise = Promise.resolve().then(() => {\n    const adapter = store.adapterFor(identifier.type);\n    assert(`You tried to load a belongsTo relationship but you have no adapter (for ${identifier.type})`, adapter);\n    assert(\n      `You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`,\n      typeof adapter.findBelongsTo === 'function'\n    );\n    const snapshot = store._fetchManager.createSnapshot(identifier, options);\n    const useLink = !link || typeof link === 'string';\n    const relatedLink = useLink ? link : link.href;\n    assert(\n      `Attempted to load a belongsTo relationship from a specified 'link' in the original payload, but the specified link is empty. You must provide a valid 'link' in the original payload to use 'findBelongsTo'`,\n      relatedLink\n    );\n    return adapter.findBelongsTo(store, snapshot, relatedLink, relationship);\n  });\n\n  return promise.then((adapterPayload) => {\n    const modelClass = store.modelFor(relationship.type);\n    const serializer = store.serializerFor(relationship.type);\n    let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findBelongsTo');\n\n    assert(\n      `fetched the belongsTo relationship '${relationship.name}' for ${identifier.type}:${\n        identifier.id\n      } with link '${JSON.stringify(\n        link\n      )}', but no data member is present in the response. If no data exists, the response should set { data: null }`,\n      'data' in payload && (payload.data === null || (typeof payload.data === 'object' && !Array.isArray(payload.data)))\n    );\n\n    if (!payload.data && !payload.links && !payload.meta) {\n      return null;\n    }\n\n    payload = syncRelationshipDataFromLink(store, payload, identifier as ResourceIdentity, relationship);\n\n    return store._push(payload, true);\n  }, null);\n}\n\n// sync\n// iterate over records in payload.data\n// for each record\n//   assert that record.relationships[inverse] is either undefined (so we can fix it)\n//     or provide a data: {id, type} that matches the record that requested it\n//   return the relationship data for the parent\nfunction syncRelationshipDataFromLink(\n  store: Store,\n  payload: JsonApiDocument,\n  parentIdentifier: ResourceIdentity,\n  relationship: RelationshipSchema\n) {\n  // ensure the right hand side (incoming payload) points to the parent record that\n  // requested this relationship\n  const relationshipData = payload.data\n    ? iterateData(payload.data, (data, index) => {\n        const { id, type } = data;\n        ensureRelationshipIsSetToParent(data, parentIdentifier, store, relationship, index);\n        return { id, type };\n      })\n    : null;\n\n  const relatedDataHash = {} as JsonApiDocument;\n\n  if ('meta' in payload) {\n    relatedDataHash.meta = payload.meta;\n  }\n  if ('links' in payload) {\n    relatedDataHash.links = payload.links;\n  }\n  if ('data' in payload) {\n    relatedDataHash.data = relationshipData;\n  }\n\n  // now, push the left hand side (the parent record) to ensure things are in sync, since\n  // the payload will be pushed with store._push\n  const parentPayload = {\n    id: parentIdentifier.id,\n    type: parentIdentifier.type,\n    relationships: {\n      [relationship.name]: relatedDataHash,\n    },\n  };\n\n  if (!Array.isArray(payload.included)) {\n    payload.included = [];\n  }\n  payload.included.push(parentPayload);\n\n  return payload;\n}\n\ntype ResourceIdentity = { id: string; type: string };\ntype RelationshipData = ResourceIdentity | ResourceIdentity[] | null;\n\nfunction ensureRelationshipIsSetToParent(\n  payload: ExistingResourceObject,\n  parentIdentifier: ResourceIdentity,\n  store: Store,\n  parentRelationship: RelationshipSchema,\n  index: number\n) {\n  const { id, type } = payload;\n\n  if (!payload.relationships) {\n    payload.relationships = {};\n  }\n  const { relationships } = payload;\n\n  const inverse = getInverse(store, parentIdentifier, parentRelationship, type);\n  if (inverse) {\n    const { inverseKey, kind } = inverse;\n\n    const relationshipData = relationships[inverseKey]?.data as RelationshipData | undefined;\n\n    if (DEBUG) {\n      if (\n        typeof relationshipData !== 'undefined' &&\n        !relationshipDataPointsToParent(relationshipData, parentIdentifier)\n      ) {\n        const inspect = function inspect(thing: unknown) {\n          return `'${JSON.stringify(thing)}'`;\n        };\n        const quotedType = inspect(type);\n        const quotedInverse = inspect(inverseKey);\n        const expected = inspect({\n          id: parentIdentifier.id,\n          type: parentIdentifier.type,\n        });\n        const expectedModel = `${parentIdentifier.type}:${parentIdentifier.id}`;\n        const got = inspect(relationshipData);\n        const prefix = typeof index === 'number' ? `data[${index}]` : `data`;\n        const path = `${prefix}.relationships.${inverseKey}.data`;\n        const data = Array.isArray(relationshipData) ? relationshipData[0] : relationshipData;\n        const other = data ? `<${data.type}:${data.id}>` : null;\n        const relationshipFetched = `${expectedModel}.${parentRelationship.kind}(\"${parentRelationship.name}\")`;\n        const includedRecord = `<${type}:${id}>`;\n        const message = [\n          `Encountered mismatched relationship: Ember Data expected ${path} in the payload from ${relationshipFetched} to include ${expected} but got ${got} instead.\\n`,\n          `The ${includedRecord} record loaded at ${prefix} in the payload specified ${other} as its ${quotedInverse}, but should have specified ${expectedModel} (the record the relationship is being loaded from) as its ${quotedInverse} instead.`,\n          `This could mean that the response for ${relationshipFetched} may have accidentally returned ${quotedType} records that aren't related to ${expectedModel} and could be related to a different ${parentIdentifier.type} record instead.`,\n          `Ember Data has corrected the ${includedRecord} record's ${quotedInverse} relationship to ${expectedModel} so that ${relationshipFetched} will include ${includedRecord}.`,\n          `Please update the response from the server or change your serializer to either ensure that the response for only includes ${quotedType} records that specify ${expectedModel} as their ${quotedInverse}, or omit the ${quotedInverse} relationship from the response.`,\n        ].join('\\n');\n\n        assert(message);\n      }\n    }\n\n    if (kind !== 'hasMany' || typeof relationshipData !== 'undefined') {\n      relationships[inverseKey] = relationships[inverseKey] || {};\n      relationships[inverseKey].data = fixRelationshipData(relationshipData ?? null, kind, parentIdentifier);\n    }\n  }\n}\n\nfunction inverseForRelationship(store: Store, identifier: { type: string; id?: string }, key: string) {\n  const definition = store.schema.fields(identifier).get(key);\n  if (!definition) {\n    return null;\n  }\n  assert(\n    `Expected the field definition to be a relationship`,\n    definition.kind === 'hasMany' || definition.kind === 'belongsTo'\n  );\n  assert(\n    `Expected the relationship defintion to specify the inverse type or null.`,\n    definition.options?.inverse === null ||\n      (typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0)\n  );\n  return definition.options.inverse;\n}\n\nfunction getInverse(\n  store: Store,\n  parentIdentifier: ResourceIdentity,\n  parentRelationship: RelationshipSchema,\n  type: string\n) {\n  const { name: lhs_relationshipName } = parentRelationship;\n  const { type: parentType } = parentIdentifier;\n  const inverseKey = inverseForRelationship(store, { type: parentType }, lhs_relationshipName);\n\n  if (inverseKey) {\n    const definition = store.schema.fields({ type }).get(inverseKey);\n    assert(\n      `Expected the field definition to be a relationship`,\n      definition && (definition.kind === 'hasMany' || definition.kind === 'belongsTo')\n    );\n    return {\n      inverseKey,\n      kind: definition.kind,\n    };\n  }\n}\n\nfunction relationshipDataPointsToParent(relationshipData: RelationshipData, identifier: ResourceIdentity): boolean {\n  if (relationshipData === null) {\n    return false;\n  }\n\n  if (Array.isArray(relationshipData)) {\n    if (relationshipData.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < relationshipData.length; i++) {\n      const entry = relationshipData[i];\n      if (validateRelationshipEntry(entry, identifier)) {\n        return true;\n      }\n    }\n  } else {\n    return validateRelationshipEntry(relationshipData, identifier);\n  }\n\n  return false;\n}\n\nfunction fixRelationshipData(\n  relationshipData: RelationshipData,\n  relationshipKind: 'hasMany' | 'belongsTo',\n  { id, type }: ResourceIdentity\n) {\n  const parentRelationshipData = {\n    id,\n    type,\n  };\n\n  let payload: { type: string; id: string } | { type: string; id: string }[] | null = null;\n\n  if (relationshipKind === 'hasMany') {\n    const relData = (relationshipData as { type: string; id: string }[]) || [];\n    if (relationshipData) {\n      assert('expected the relationship data to be an array', Array.isArray(relationshipData));\n      // these arrays could be massive so this is better than filter\n      // Note: this is potentially problematic if type/id are not in the\n      // same state of normalization.\n      const found = relationshipData.find((v) => {\n        return v.type === parentRelationshipData.type && v.id === parentRelationshipData.id;\n      });\n      if (!found) {\n        relData.push(parentRelationshipData);\n      }\n    } else {\n      relData.push(parentRelationshipData);\n    }\n    payload = relData;\n  } else {\n    const relData = (relationshipData as { type: string; id: string }) || {};\n    Object.assign(relData, parentRelationshipData);\n    payload = relData;\n  }\n\n  return payload;\n}\n\nfunction validateRelationshipEntry({ id }: ResourceIdentity, { id: parentModelID }: ResourceIdentity): boolean {\n  return !!id && id.toString() === parentModelID;\n}\n","import { importSync } from '@embroider/macros';\n\nimport type { Future, Handler, NextFn, StructuredDataDocument } from '@ember-data/request';\nimport type Store from '@ember-data/store';\nimport type { StoreRequestContext } from '@ember-data/store';\nimport type { CollectionRecordArray } from '@ember-data/store/-private';\nimport type { ModelSchema } from '@ember-data/store/types';\nimport { LOG_REQUESTS } from '@warp-drive/build-config/debugging';\nimport { DEBUG, TESTING } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableExistingRecordIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';\nimport type { ImmutableRequestInfo } from '@warp-drive/core-types/request';\nimport type { LegacyRelationshipField as RelationshipSchema } from '@warp-drive/core-types/schema/fields';\nimport type { SingleResourceDataDocument } from '@warp-drive/core-types/spec/document';\nimport type { ApiError } from '@warp-drive/core-types/spec/error';\nimport type {\n  CollectionResourceDocument,\n  JsonApiDocument,\n  Links,\n  PaginationLinks,\n  SingleResourceDocument,\n} from '@warp-drive/core-types/spec/json-api-raw';\n\nimport { upgradeStore } from '../-private';\nimport { FetchManager, SaveOp } from './fetch-manager';\nimport { assertIdentifierHasId } from './identifier-has-id';\nimport { _findBelongsTo, _findHasMany } from './legacy-data-fetch';\nimport { payloadIsNotBlank } from './legacy-data-utils';\nimport type { MinimumAdapterInterface } from './minimum-adapter-interface';\nimport type { MinimumSerializerInterface } from './minimum-serializer-interface';\nimport { normalizeResponseHelper } from './serializer-response';\nimport type { Snapshot } from './snapshot';\nimport { SnapshotRecordArray } from './snapshot-record-array';\n\ntype AdapterErrors = Error & { errors?: unknown[]; isAdapterError?: true; code?: string };\ntype SerializerWithParseErrors = MinimumSerializerInterface & {\n  extractErrors?(store: Store, modelClass: ModelSchema, error: AdapterErrors, recordId: string | null): unknown;\n};\n\nconst PotentialLegacyOperations = new Set([\n  'findRecord',\n  'findAll',\n  'query',\n  'queryRecord',\n  'findBelongsTo',\n  'findHasMany',\n  'updateRecord',\n  'createRecord',\n  'deleteRecord',\n]);\n\nexport const LegacyNetworkHandler: Handler = {\n  request<T>(context: StoreRequestContext, next: NextFn<T>): Future<T> | Promise<StructuredDataDocument<T>> {\n    // if we are not a legacy request, move on\n    if (context.request.url || !context.request.op || !PotentialLegacyOperations.has(context.request.op)) {\n      return next(context.request);\n    }\n\n    const { store } = context.request;\n    upgradeStore(store);\n    if (!store._fetchManager) {\n      store._fetchManager = new FetchManager(store);\n    }\n\n    switch (context.request.op) {\n      case 'findRecord':\n        return findRecord(context);\n      case 'findAll':\n        return findAll(context);\n      case 'query':\n        return query(context);\n      case 'queryRecord':\n        return queryRecord(context);\n      case 'findBelongsTo':\n        return findBelongsTo(context);\n      case 'findHasMany':\n        return findHasMany(context);\n      case 'updateRecord':\n        return saveRecord(context);\n      case 'createRecord':\n        return saveRecord(context);\n      case 'deleteRecord':\n        return saveRecord(context);\n      default:\n        return next(context.request);\n    }\n  },\n};\n\nfunction findBelongsTo<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, records: identifiers } = context.request;\n  const { options, record, links, useLink, field } = data as {\n    record: StableRecordIdentifier;\n    options: Record<string, unknown>;\n    links?: Links;\n    useLink: boolean;\n    field: RelationshipSchema;\n  };\n  const identifier = identifiers?.[0];\n  upgradeStore(store);\n\n  // short circuit if we are already loading\n  const pendingRequest =\n    identifier && store._fetchManager.getPendingFetch(identifier as StableExistingRecordIdentifier, options);\n  if (pendingRequest) {\n    return pendingRequest as Promise<T>;\n  }\n\n  if (useLink) {\n    assert(`Expected a related link when calling store.findBelongsTo, found ${String(links)}`, links && links.related);\n    return _findBelongsTo(store, record, links.related, field, options) as Promise<T>;\n  }\n\n  assert(`Expected an identifier`, Array.isArray(identifiers) && identifiers.length === 1);\n\n  const manager = store._fetchManager;\n  assertIdentifierHasId(identifier);\n\n  return options.reload\n    ? (manager.scheduleFetch(identifier, options, context.request) as Promise<T>)\n    : (manager.fetchDataIfNeededForIdentifier(identifier, options, context.request) as Promise<T>);\n}\n\nfunction findHasMany<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, records: identifiers } = context.request;\n  const { options, record, links, useLink, field } = data as {\n    record: StableRecordIdentifier;\n    options: Record<string, unknown>;\n    links?: PaginationLinks | Links;\n    useLink: boolean;\n    field: RelationshipSchema;\n  };\n  upgradeStore(store);\n\n  // link case\n  if (useLink) {\n    const adapter = store.adapterFor(record.type);\n    /*\n    If a relationship was originally populated by the adapter as a link\n    (as opposed to a list of IDs), this method is called when the\n    relationship is fetched.\n\n    The link (which is usually a URL) is passed through unchanged, so the\n    adapter can make whatever request it wants.\n\n    The usual use-case is for the server to register a URL as a link, and\n    then use that URL in the future to make a request for the relationship.\n  */\n    assert(`You tried to load a hasMany relationship but you have no adapter (for ${record.type})`, adapter);\n    assert(\n      `You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`,\n      typeof adapter.findHasMany === 'function'\n    );\n    assert(`Expected a related link when calling store.findHasMany, found ${String(links)}`, links && links.related);\n\n    return _findHasMany(adapter, store, record, links.related, field, options) as Promise<T>;\n  }\n\n  // identifiers case\n  assert(`Expected an array of identifiers to fetch`, Array.isArray(identifiers));\n  const fetches = new Array<globalThis.Promise<StableRecordIdentifier>>(identifiers.length);\n  const manager = store._fetchManager;\n\n  for (let i = 0; i < identifiers.length; i++) {\n    const identifier = identifiers[i];\n    // TODO we probably can be lenient here and return from cache for the isNew case\n    assertIdentifierHasId(identifier);\n    fetches[i] = options.reload\n      ? manager.scheduleFetch(identifier, options, context.request)\n      : manager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n  }\n\n  return Promise.all(fetches) as Promise<T>;\n}\n\nfunction saveRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, op: operation } = context.request;\n  const { options, record: identifier } = data as { record: StableRecordIdentifier; options: Record<string, unknown> };\n\n  upgradeStore(store);\n\n  store.cache.willCommit(identifier, context);\n\n  const saveOptions = Object.assign(\n    { [SaveOp]: operation as 'updateRecord' | 'deleteRecord' | 'createRecord' },\n    options\n  );\n  const fetchManagerPromise = store._fetchManager.scheduleSave(identifier, saveOptions);\n\n  return fetchManagerPromise\n    .then((payload) => {\n      let result: SingleResourceDataDocument;\n      store._join(() => {\n        // @ts-expect-error we don't have access to a response in legacy\n        result = store.cache.didCommit(identifier, { request: context.request, content: payload });\n      });\n\n      // blatantly lie if we were a createRecord request\n      // to give some semblance of cache-control to the\n      // CachePolicy while legacy is still around\n      if (store.lifetimes?.didRequest && operation === 'createRecord') {\n        store.lifetimes.didRequest(context.request, { status: 201 } as Response, null, store);\n      }\n      return store.peekRecord(result!.data!);\n    })\n    .catch((e: unknown) => {\n      let err = e;\n      if (!e) {\n        err = new Error(`Unknown Error Occurred During Request`);\n      } else if (typeof e === 'string') {\n        err = new Error(e);\n      }\n      adapterDidInvalidate(store, identifier, err as Error);\n      throw err;\n    }) as Promise<T>;\n}\n\nfunction adapterDidInvalidate(\n  store: Store,\n  identifier: StableRecordIdentifier,\n  error: Error & { errors?: ApiError[]; isAdapterError?: true; code?: string }\n) {\n  upgradeStore(store);\n  if (error && error.isAdapterError === true && error.code === 'InvalidError') {\n    const serializer = store.serializerFor(identifier.type) as SerializerWithParseErrors;\n\n    // TODO @deprecate extractErrors being called\n    // TODO remove extractErrors from the default serializers.\n    if (serializer && typeof serializer.extractErrors === 'function') {\n      const errorsHash = serializer.extractErrors(\n        store,\n        store.modelFor(identifier.type),\n        error,\n        identifier.id\n      ) as Record<string, string | string[]>;\n      error.errors = errorsHashToArray(errorsHash);\n    }\n  }\n  const cache = store.cache;\n\n  if (error.errors) {\n    assert(\n      `Expected the cache in use by resource ${String(\n        identifier\n      )} to have a getErrors(identifier) method for retrieving errors.`,\n      typeof cache.getErrors === 'function'\n    );\n\n    let jsonApiErrors: ApiError[] = error.errors;\n    if (jsonApiErrors.length === 0) {\n      jsonApiErrors = [{ title: 'Invalid Error', detail: '', source: { pointer: '/data' } }];\n    }\n    cache.commitWasRejected(identifier, jsonApiErrors);\n  } else {\n    cache.commitWasRejected(identifier);\n  }\n}\n\nfunction makeArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\nfunction errorsHashToArray(errors: Record<string, string | string[]>): ApiError[] {\n  const out: ApiError[] = [];\n\n  if (errors) {\n    Object.keys(errors).forEach((key) => {\n      const messages = makeArray(errors[key]);\n      for (let i = 0; i < messages.length; i++) {\n        let title = 'Invalid Attribute';\n        let pointer = `/data/attributes/${key}`;\n        if (key === PRIMARY_ATTRIBUTE_KEY) {\n          title = 'Invalid Document';\n          pointer = `/data`;\n        }\n        out.push({\n          title: title,\n          detail: messages[i],\n          source: {\n            pointer: pointer,\n          },\n        });\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction findRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  const { record: identifier, options } = data as {\n    record: StableExistingRecordIdentifier;\n    options: { reload?: boolean; backgroundReload?: boolean };\n  };\n  upgradeStore(store);\n  let promise: Promise<StableRecordIdentifier>;\n\n  // if not loaded start loading\n  if (!store._instanceCache.recordIsLoaded(identifier)) {\n    promise = store._fetchManager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n\n    // Refetch if the reload option is passed\n  } else if (options.reload) {\n    assertIdentifierHasId(identifier);\n\n    promise = store._fetchManager.scheduleFetch(identifier, options, context.request);\n  } else {\n    let snapshot: Snapshot | null = null;\n    const adapter = store.adapterFor(identifier.type);\n\n    // Refetch the record if the adapter thinks the record is stale\n    if (\n      typeof options.reload === 'undefined' &&\n      adapter.shouldReloadRecord &&\n      adapter.shouldReloadRecord(store, (snapshot = store._fetchManager.createSnapshot(identifier, options)))\n    ) {\n      assertIdentifierHasId(identifier);\n      if (DEBUG) {\n        promise = store._fetchManager.scheduleFetch(\n          identifier,\n          Object.assign({}, options, { reload: true }),\n          context.request\n        );\n      } else {\n        options.reload = true;\n        promise = store._fetchManager.scheduleFetch(identifier, options, context.request);\n      }\n    } else {\n      // Trigger the background refetch if backgroundReload option is passed\n      if (\n        options.backgroundReload !== false &&\n        (options.backgroundReload ||\n          !adapter.shouldBackgroundReloadRecord ||\n          adapter.shouldBackgroundReloadRecord(\n            store,\n            (snapshot = snapshot || store._fetchManager.createSnapshot(identifier, options))\n          ))\n      ) {\n        assertIdentifierHasId(identifier);\n\n        if (DEBUG) {\n          void store._fetchManager.scheduleFetch(\n            identifier,\n            Object.assign({}, options, { backgroundReload: true }),\n            context.request\n          );\n        } else {\n          options.backgroundReload = true;\n          void store._fetchManager.scheduleFetch(identifier, options, context.request);\n        }\n      }\n\n      // Return the cached record\n      promise = Promise.resolve(identifier) as Promise<StableRecordIdentifier>;\n    }\n  }\n\n  return promise.then((i: StableRecordIdentifier) => store.peekRecord(i)) as Promise<T>;\n}\n\nfunction findAll<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  const { type, options } = data as {\n    type: string;\n    options: { reload?: boolean; backgroundReload?: boolean };\n  };\n  upgradeStore(store);\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to load all records but you have no adapter (for ${type})`, adapter);\n  assert(\n    `You tried to load all records but your adapter does not implement 'findAll'`,\n    typeof adapter.findAll === 'function'\n  );\n\n  // avoid initializing the liveArray just to set `isUpdating`\n  const maybeRecordArray = store.recordArrayManager._live.get(type);\n  const snapshotArray = new SnapshotRecordArray(store, type, options);\n\n  const shouldReload =\n    options.reload ||\n    (options.reload !== false &&\n      ((adapter.shouldReloadAll && adapter.shouldReloadAll(store, snapshotArray)) ||\n        (!adapter.shouldReloadAll && snapshotArray.length === 0)));\n\n  let fetch: Promise<T> | undefined;\n  if (shouldReload) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    maybeRecordArray && (maybeRecordArray.isUpdating = true);\n    fetch = _findAll(adapter, store, type, snapshotArray, context.request, true);\n  } else {\n    fetch = Promise.resolve(store.peekAll(type)) as Promise<T>;\n\n    if (\n      options.backgroundReload ||\n      (options.backgroundReload !== false &&\n        (!adapter.shouldBackgroundReloadAll || adapter.shouldBackgroundReloadAll(store, snapshotArray)))\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      maybeRecordArray && (maybeRecordArray.isUpdating = true);\n      void _findAll(adapter, store, type, snapshotArray, context.request, false);\n    }\n  }\n\n  return fetch;\n}\n\nfunction _findAll<T>(\n  adapter: MinimumAdapterInterface,\n  store: Store,\n  type: string,\n  snapshotArray: SnapshotRecordArray,\n  request: ImmutableRequestInfo,\n  isAsyncFlush: boolean\n): Promise<T> {\n  const schema = store.modelFor(type);\n  let promise: Promise<T> = Promise.resolve().then(() =>\n    adapter.findAll(store, schema, null, snapshotArray)\n  ) as Promise<T>;\n\n  promise = promise.then((adapterPayload: T) => {\n    assert(\n      `You made a 'findAll' request for '${type}' records, but the adapter's response did not have any data`,\n      payloadIsNotBlank(adapterPayload)\n    );\n    upgradeStore(store);\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(serializer, store, schema, adapterPayload, null, 'findAll');\n\n    store._push(payload, isAsyncFlush);\n    snapshotArray._recordArray.isUpdating = false;\n\n    if (LOG_REQUESTS) {\n      // eslint-disable-next-line no-console\n      console.log(`request: findAll<${type}> background reload complete`);\n    }\n    return snapshotArray._recordArray;\n  }) as Promise<T>;\n\n  if (TESTING) {\n    if (!request.disableTestWaiter) {\n      const { waitForPromise } = importSync('@ember/test-waiters') as {\n        waitForPromise: <PT>(promise: Promise<PT>) => Promise<PT>;\n      };\n      promise = waitForPromise(promise);\n    }\n  }\n\n  return promise;\n}\n\nfunction query<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  upgradeStore(store);\n  let { options } = data as {\n    options: { _recordArray?: CollectionRecordArray; adapterOptions?: Record<string, unknown> };\n  };\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const { type, query } = data as {\n    type: string;\n    query: Record<string, unknown>;\n    options: { _recordArray?: CollectionRecordArray; adapterOptions?: Record<string, unknown> };\n  };\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to make a query but you have no adapter (for ${type})`, adapter);\n  assert(`You tried to make a query but your adapter does not implement 'query'`, typeof adapter.query === 'function');\n\n  const recordArray =\n    options._recordArray ||\n    store.recordArrayManager.getCollection({\n      type,\n      query,\n    });\n\n  if (DEBUG) {\n    options = Object.assign({}, options);\n    delete options._recordArray;\n  } else {\n    delete options._recordArray;\n  }\n  const schema = store.modelFor(type);\n  const promise = Promise.resolve().then(() => adapter.query(store, schema, query, recordArray, options));\n\n  return promise.then((adapterPayload) => {\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(\n      serializer,\n      store,\n      schema,\n      adapterPayload as Record<string, unknown>,\n      null,\n      'query'\n    );\n    const identifiers = store._push(payload, true);\n\n    assert(\n      'The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.',\n      Array.isArray(identifiers)\n    );\n\n    store.recordArrayManager.populateManagedArray(recordArray, identifiers, payload as CollectionResourceDocument);\n\n    return recordArray;\n  }) as Promise<T>;\n}\n\nfunction assertSingleResourceDocument(payload: JsonApiDocument): asserts payload is SingleResourceDocument {\n  assert(\n    `Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`,\n    !Array.isArray(payload.data)\n  );\n}\n\nfunction queryRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const { type, query, options } = data as { type: string; query: Record<string, unknown>; options: object };\n  upgradeStore(store);\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to make a query but you have no adapter (for ${type})`, adapter);\n  assert(\n    `You tried to make a query but your adapter does not implement 'queryRecord'`,\n    typeof adapter.queryRecord === 'function'\n  );\n\n  const schema = store.modelFor(type);\n  const promise = Promise.resolve().then(() => adapter.queryRecord(store, schema, query, options)) as Promise<T>;\n\n  return promise.then((adapterPayload: T) => {\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(\n      serializer,\n      store,\n      schema,\n      adapterPayload as Record<string, unknown>,\n      null,\n      'queryRecord'\n    );\n\n    assertSingleResourceDocument(payload);\n\n    const identifier = store._push(payload, true) as StableRecordIdentifier;\n    return identifier ? store.peekRecord(identifier) : null;\n  }) as Promise<T>;\n}\n","import { getOwner } from '@ember/application';\n\nimport type Store from '@ember-data/store';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport { _deprecatingNormalize } from '@ember-data/store/-private';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { ObjectValue } from '@warp-drive/core-types/json/raw';\n\nimport { FetchManager, upgradeStore } from './-private';\nimport type { AdapterPayload, MinimumAdapterInterface } from './legacy-network-handler/minimum-adapter-interface';\nimport type {\n  MinimumSerializerInterface,\n  SerializerOptions,\n} from './legacy-network-handler/minimum-serializer-interface';\n\nexport { LegacyNetworkHandler } from './legacy-network-handler/legacy-network-handler';\n\nexport type { MinimumAdapterInterface, MinimumSerializerInterface, SerializerOptions, AdapterPayload };\n\n/**\n * @module @ember-data/store\n * @class Store\n */\nexport type LegacyStoreCompat = {\n  _fetchManager: FetchManager;\n  adapterFor(this: Store, modelName: string): MinimumAdapterInterface;\n  adapterFor(this: Store, modelName: string, _allowMissing: true): MinimumAdapterInterface | undefined;\n\n  serializerFor<K extends string>(modelName: K, _allowMissing?: boolean): MinimumSerializerInterface | null;\n\n  normalize(modelName: string, payload: ObjectValue): ObjectValue;\n  pushPayload(modelName: string, payload: ObjectValue): void;\n  serializeRecord(record: unknown, options?: SerializerOptions): unknown;\n\n  _adapterCache: Record<string, MinimumAdapterInterface & { store: Store }>;\n  _serializerCache: Record<string, MinimumSerializerInterface & { store: Store }>;\n};\n\nexport type CompatStore = Store & LegacyStoreCompat;\n\n/**\n    Returns an instance of the adapter for a given type. For\n    example, `adapterFor('person')` will return an instance of\n    the adapter located at `app/adapters/person.js`\n\n    If no `person` adapter is found, this method will look\n    for an `application` adapter (the default adapter for\n    your entire application).\n\n    @method adapterFor\n    @public\n    @param {String} modelName\n    @return Adapter\n  */\nexport function adapterFor(this: Store, modelName: string): MinimumAdapterInterface;\nexport function adapterFor(this: Store, modelName: string, _allowMissing: true): MinimumAdapterInterface | undefined;\nexport function adapterFor(this: Store, modelName: string, _allowMissing?: true): MinimumAdapterInterface | undefined {\n  assert(\n    `Attempted to call store.adapterFor(), but the store instance has already been destroyed.`,\n    !(this.isDestroying || this.isDestroyed)\n  );\n  assert(`You need to pass a model name to the store's adapterFor method`, modelName);\n  assert(\n    `Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`,\n    typeof modelName === 'string'\n  );\n  upgradeStore(this);\n  this._adapterCache =\n    this._adapterCache || (Object.create(null) as Record<string, MinimumAdapterInterface & { store: Store }>);\n\n  const normalizedModelName = _deprecatingNormalize(modelName);\n\n  const { _adapterCache } = this;\n  let adapter: (MinimumAdapterInterface & { store: Store }) | undefined = _adapterCache[normalizedModelName];\n  if (adapter) {\n    return adapter;\n  }\n\n  const owner = getOwner(this)!;\n\n  // name specific adapter\n  adapter = owner.lookup(`adapter:${normalizedModelName}`) as (MinimumAdapterInterface & { store: Store }) | undefined;\n  if (adapter !== undefined) {\n    _adapterCache[normalizedModelName] = adapter;\n    return adapter;\n  }\n\n  // no adapter found for the specific name, fallback and check for application adapter\n  adapter = _adapterCache.application || owner.lookup('adapter:application');\n  if (adapter !== undefined) {\n    _adapterCache[normalizedModelName] = adapter;\n    _adapterCache.application = adapter;\n    return adapter;\n  }\n\n  assert(\n    `No adapter was found for '${modelName}' and no 'application' adapter was found as a fallback.`,\n    _allowMissing\n  );\n}\n\n/**\n    Returns an instance of the serializer for a given type. For\n    example, `serializerFor('person')` will return an instance of\n    `App.PersonSerializer`.\n\n    If no `App.PersonSerializer` is found, this method will look\n    for an `App.ApplicationSerializer` (the default serializer for\n    your entire application).\n\n    If a serializer cannot be found on the adapter, it will fall back\n    to an instance of `JSONSerializer`.\n\n    @method serializerFor\n    @public\n    @param {String} modelName the record to serialize\n    @return {Serializer}\n  */\nexport function serializerFor(this: Store, modelName: string): MinimumSerializerInterface | null {\n  assert(\n    `Attempted to call store.serializerFor(), but the store instance has already been destroyed.`,\n    !(this.isDestroying || this.isDestroyed)\n  );\n  assert(`You need to pass a model name to the store's serializerFor method`, modelName);\n  assert(\n    `Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`,\n    typeof modelName === 'string'\n  );\n  upgradeStore(this);\n  this._serializerCache =\n    this._serializerCache || (Object.create(null) as Record<string, MinimumSerializerInterface & { store: Store }>);\n  const normalizedModelName = _deprecatingNormalize(modelName);\n\n  const { _serializerCache } = this;\n  let serializer: (MinimumSerializerInterface & { store: Store }) | undefined = _serializerCache[normalizedModelName];\n  if (serializer) {\n    return serializer;\n  }\n\n  // by name\n  const owner = getOwner(this)!;\n  serializer = owner.lookup(`serializer:${normalizedModelName}`) as\n    | (MinimumSerializerInterface & { store: Store })\n    | undefined;\n  if (serializer !== undefined) {\n    _serializerCache[normalizedModelName] = serializer;\n    return serializer;\n  }\n\n  // no serializer found for the specific model, fallback and check for application serializer\n  serializer = _serializerCache.application || owner.lookup('serializer:application');\n  if (serializer !== undefined) {\n    _serializerCache[normalizedModelName] = serializer;\n    _serializerCache.application = serializer;\n    return serializer;\n  }\n\n  return null;\n}\n\n/**\n    `normalize` converts a json payload into the normalized form that\n    [push](../methods/push?anchor=push) expects.\n\n    Example\n\n    ```js\n    socket.on('message', function(message) {\n      let modelName = message.model;\n      let data = message.data;\n      store.push(store.normalize(modelName, data));\n    });\n    ```\n\n    @method normalize\n    @public\n    @param {String} modelName The name of the model type for this payload\n    @param {Object} payload\n    @return {Object} The normalized payload\n  */\n// TODO @runspired @deprecate users should call normalize on the associated serializer directly\nexport function normalize(this: Store, modelName: string, payload: ObjectValue) {\n  upgradeStore(this);\n  assert(\n    `Attempted to call store.normalize(), but the store instance has already been destroyed.`,\n    !(this.isDestroying || this.isDestroyed)\n  );\n  assert(`You need to pass a model name to the store's normalize method`, modelName);\n  assert(\n    `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${typeof modelName}`,\n    typeof modelName === 'string'\n  );\n  const normalizedModelName = _deprecatingNormalize(modelName);\n  const serializer = this.serializerFor(normalizedModelName);\n  const schema = this.modelFor(normalizedModelName);\n  assert(\n    `You must define a normalize method in your serializer in order to call store.normalize`,\n    typeof serializer?.normalize === 'function'\n  );\n  return serializer.normalize(schema, payload);\n}\n\n/**\n    Push some raw data into the store.\n\n    This method can be used both to push in brand new\n    records, as well as to update existing records. You\n    can push in more than one type of object at once.\n    All objects should be in the format expected by the\n    serializer.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n    export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```js\n    let pushData = {\n      posts: [\n        { id: 1, postTitle: \"Great post\", commentIds: [2] }\n      ],\n      comments: [\n        { id: 2, commentBody: \"Insightful comment\" }\n      ]\n    }\n\n    store.pushPayload(pushData);\n    ```\n\n    By default, the data will be deserialized using a default\n    serializer (the application serializer if it exists).\n\n    Alternatively, `pushPayload` will accept a model type which\n    will determine which serializer will process the payload.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n     export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n\n    export default JSONSerializer;\n    ```\n\n    ```js\n    store.pushPayload(pushData); // Will use the application serializer\n    store.pushPayload('post', pushData); // Will use the post serializer\n    ```\n\n    @method pushPayload\n    @public\n    @param {String} modelName Optionally, a model type used to determine which serializer will be used\n    @param {Object} inputPayload\n  */\n// TODO @runspired @deprecate pushPayload in favor of looking up the serializer\nexport function pushPayload(this: Store, modelName: string, inputPayload: ObjectValue): void {\n  upgradeStore(this);\n  assert(\n    `Attempted to call store.pushPayload(), but the store instance has already been destroyed.`,\n    !(this.isDestroying || this.isDestroyed)\n  );\n\n  const payload: ObjectValue = inputPayload || (modelName as unknown as ObjectValue);\n  const normalizedModelName = inputPayload ? _deprecatingNormalize(modelName) : 'application';\n  const serializer = this.serializerFor(normalizedModelName);\n\n  assert(\n    `You cannot use 'store.pushPayload(<type>, <payload>)' unless the serializer for '${normalizedModelName}' defines 'pushPayload'`,\n    serializer && typeof serializer.pushPayload === 'function'\n  );\n  serializer.pushPayload(this, payload);\n}\n\n// TODO @runspired @deprecate records should implement their own serialization if desired\nexport function serializeRecord(this: Store, record: unknown, options?: SerializerOptions): unknown {\n  upgradeStore(this);\n  // TODO we used to check if the record was destroyed here\n  if (!this._fetchManager) {\n    this._fetchManager = new FetchManager(this);\n  }\n\n  return this._fetchManager.createSnapshot(recordIdentifierFor(record)).serialize(options);\n}\n\nexport function cleanup(this: Store) {\n  upgradeStore(this);\n  // enqueue destruction of any adapters/serializers we have created\n  for (const adapterName in this._adapterCache) {\n    const adapter = this._adapterCache[adapterName];\n    if (typeof adapter.destroy === 'function') {\n      adapter.destroy();\n    }\n  }\n\n  for (const serializerName in this._serializerCache) {\n    const serializer = this._serializerCache[serializerName];\n    if (typeof serializer.destroy === 'function') {\n      serializer.destroy();\n    }\n  }\n}\n"],"names":["_findHasMany","adapter","store","identifier","link","relationship","options","promise","Promise","resolve","then","snapshot","_fetchManager","createSnapshot","useLink","relatedLink","href","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","findHasMany","adapterPayload","type","name","JSON","stringify","payloadIsNotBlank","modelClass","modelFor","serializer","serializerFor","payload","normalizeResponseHelper","id","Array","isArray","data","syncRelationshipDataFromLink","_push","_findBelongsTo","adapterFor","findBelongsTo","links","meta","parentIdentifier","relationshipData","iterateData","index","ensureRelationshipIsSetToParent","relatedDataHash","parentPayload","relationships","included","push","parentRelationship","inverse","getInverse","inverseKey","kind","relationshipDataPointsToParent","inspect","thing","quotedType","quotedInverse","expected","expectedModel","got","prefix","path","other","relationshipFetched","includedRecord","message","join","fixRelationshipData","inverseForRelationship","key","definition","schema","fields","get","length","lhs_relationshipName","parentType","i","entry","validateRelationshipEntry","relationshipKind","parentRelationshipData","relData","found","find","v","Object","assign","parentModelID","toString","PotentialLegacyOperations","Set","LegacyNetworkHandler","request","context","next","url","op","has","FetchManager","findRecord","findAll","query","queryRecord","saveRecord","records","identifiers","record","field","pendingRequest","getPendingFetch","String","related","manager","assertIdentifierHasId","reload","scheduleFetch","fetchDataIfNeededForIdentifier","fetches","all","operation","cache","willCommit","saveOptions","SaveOp","fetchManagerPromise","scheduleSave","result","_join","didCommit","content","lifetimes","didRequest","status","peekRecord","catch","e","err","adapterDidInvalidate","error","isAdapterError","code","extractErrors","errorsHash","errors","errorsHashToArray","getErrors","jsonApiErrors","title","detail","source","pointer","commitWasRejected","makeArray","value","PRIMARY_ATTRIBUTE_KEY","out","keys","forEach","messages","_instanceCache","recordIsLoaded","shouldReloadRecord","backgroundReload","shouldBackgroundReloadRecord","maybeRecordArray","recordArrayManager","_live","snapshotArray","SnapshotRecordArray","shouldReload","shouldReloadAll","fetch","isUpdating","_findAll","peekAll","shouldBackgroundReloadAll","isAsyncFlush","_recordArray","activeLogging","LOG_REQUESTS","debug","globalThis","getWarpDriveRuntimeConfig","console","log","TESTING","disableTestWaiter","waitForPromise","importSync","recordArray","getCollection","populateManagedArray","assertSingleResourceDocument","modelName","_allowMissing","isDestroying","isDestroyed","_adapterCache","create","normalizedModelName","_deprecatingNormalize","owner","getOwner","lookup","undefined","application","_serializerCache","normalize","pushPayload","inputPayload","serializeRecord","recordIdentifierFor","serialize","cleanup","adapterName","destroy","serializerName"],"mappings":"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"}