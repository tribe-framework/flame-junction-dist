import { recordIdentifierFor } from '@ember-data/store';
import { getOrSetGlobal } from '@warp-drive/core-types/-private';
import { Type } from '@warp-drive/core-types/symbols';
import '@ember/object';
import '@ember-data/store/-private';
import '@ember/debug';
import '@ember-data/request-utils/string';
import { macroCondition, getGlobalConfig } from '@embroider/macros';
import { u as unloadRecord, s as serialize, b as save, r as rollbackAttributes, c as reload, h as hasMany, E as Errors, d as destroyRecord, e as deleteRecord, R as RecordState, f as changedAttributes, g as belongsTo, i as createSnapshot } from "./model-rk3atPqV.js";
import '@ember/application';
import { b as buildSchema } from "./schema-provider-Bvogtzx9.js";

// 'isDestroying', 'isDestroyed'
const LegacyFields = ['_createSnapshot', 'adapterError', 'belongsTo', 'changedAttributes', 'constructor', 'currentState', 'deleteRecord', 'destroyRecord', 'dirtyType', 'errors', 'hasDirtyAttributes', 'hasMany', 'isDeleted', 'isEmpty', 'isError', 'isLoaded', 'isLoading', 'isNew', 'isSaving', 'isValid', 'reload', 'rollbackAttributes', 'save', 'serialize', 'unloadRecord'];
const LegacySupport = getOrSetGlobal('LegacySupport', new WeakMap());
function legacySupport(record, options, prop) {
  let state = LegacySupport.get(record);
  if (!state) {
    state = {};
    LegacySupport.set(record, state);
  }
  switch (prop) {
    case '_createSnapshot':
      return createSnapshot;
    case 'adapterError':
      return record.currentState.adapterError;
    case 'belongsTo':
      return belongsTo;
    case 'changedAttributes':
      return changedAttributes;
    case 'constructor':
      return state._constructor = state._constructor || {
        isModel: true,
        name: `Record<${recordIdentifierFor(record).type}>`,
        modelName: recordIdentifierFor(record).type
      };
    case 'currentState':
      return state.recordState = state.recordState || new RecordState(record);
    case 'deleteRecord':
      return deleteRecord;
    case 'destroyRecord':
      return destroyRecord;
    case 'dirtyType':
      return record.currentState.dirtyType;
    case 'errors':
      // @ts-expect-error
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      return state.errors = state.errors || Errors.create({
        __record: record
      });
    case 'hasDirtyAttributes':
      return record.currentState.isDirty;
    case 'hasMany':
      return hasMany;
    case 'isDeleted':
      return record.currentState.isDeleted;
    case 'isEmpty':
      return record.currentState.isEmpty;
    case 'isError':
      return record.currentState.isError;
    case 'isLoaded':
      return record.currentState.isLoaded;
    case 'isLoading':
      return record.currentState.isLoading;
    case 'isNew':
      return record.currentState.isNew;
    case 'isSaving':
      return record.currentState.isSaving;
    case 'isValid':
      return record.currentState.isValid;
    case 'reload':
      return reload;
    case 'rollbackAttributes':
      return rollbackAttributes;
    case 'save':
      return save;
    case 'serialize':
      return serialize;
    case 'unloadRecord':
      return unloadRecord;
    default:
      macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
        {
          throw new Error(`${prop} is not a supported legacy field`);
        }
      })() : {};
  }
}
legacySupport[Type] = '@legacy';
function withDefaults(schema) {
  schema.legacy = true;
  schema.identity = {
    kind: '@id',
    name: 'id'
  };
  LegacyFields.forEach(field => {
    schema.fields.push({
      type: '@legacy',
      name: field,
      kind: 'derived'
    });
  });
  schema.fields.push({
    name: 'isReloading',
    kind: '@local',
    type: 'boolean',
    options: {
      defaultValue: false
    }
  });
  schema.fields.push({
    name: 'isDestroying',
    kind: '@local',
    type: 'boolean',
    options: {
      defaultValue: false
    }
  });
  schema.fields.push({
    name: 'isDestroyed',
    kind: '@local',
    type: 'boolean',
    options: {
      defaultValue: false
    }
  });
  return schema;
}
function registerDerivations(schema) {
  schema.registerDerivation(legacySupport);
}
class DelegatingSchemaService {
  _preferred;
  _secondary;
  constructor(store, schema) {
    this._preferred = schema;
    this._secondary = buildSchema(store);
  }
  resourceTypes() {
    return Array.from(new Set(this._preferred.resourceTypes().concat(this._secondary.resourceTypes())));
  }
  hasResource(resource) {
    return this._preferred.hasResource(resource) || this._secondary.hasResource(resource);
  }
  hasTrait(type) {
    if (this._preferred.hasResource({
      type
    })) {
      return this._preferred.hasTrait(type);
    }
    return this._secondary.hasTrait(type);
  }
  resourceHasTrait(resource, trait) {
    if (this._preferred.hasResource(resource)) {
      return this._preferred.resourceHasTrait(resource, trait);
    }
    return this._secondary.resourceHasTrait(resource, trait);
  }
  fields(resource) {
    if (this._preferred.hasResource(resource)) {
      return this._preferred.fields(resource);
    }
    return this._secondary.fields(resource);
  }
  transformation(field) {
    return this._preferred.transformation(field);
  }
  hashFn(field) {
    return this._preferred.hashFn(field);
  }
  derivation(field) {
    return this._preferred.derivation(field);
  }
  resource(resource) {
    if (this._preferred.hasResource(resource)) {
      return this._preferred.resource(resource);
    }
    return this._secondary.resource(resource);
  }
  registerResources(schemas) {
    this._preferred.registerResources(schemas);
  }
  registerResource(schema) {
    this._preferred.registerResource(schema);
  }
  registerTransformation(transform) {
    this._preferred.registerTransformation(transform);
  }
  registerDerivation(derivation) {
    this._preferred.registerDerivation(derivation);
  }
  registerHashFn(hashFn) {
    this._preferred.registerHashFn(hashFn);
  }
}
if (macroCondition(getGlobalConfig().WarpDrive.deprecations.ENABLE_LEGACY_SCHEMA_SERVICE)) {
  DelegatingSchemaService.prototype.attributesDefinitionFor = function (resource) {
    if (this._preferred.hasResource(resource)) {
      return this._preferred.attributesDefinitionFor(resource);
    }
    return this._secondary.attributesDefinitionFor(resource);
  };
  DelegatingSchemaService.prototype.relationshipsDefinitionFor = function (resource) {
    if (this._preferred.hasResource(resource)) {
      return this._preferred.relationshipsDefinitionFor(resource);
    }
    return this._secondary.relationshipsDefinitionFor(resource);
  };
  DelegatingSchemaService.prototype.doesTypeExist = function (type) {
    return this._preferred.doesTypeExist?.(type) || this._secondary.doesTypeExist?.(type) || false;
  };
}
export { DelegatingSchemaService, registerDerivations, withDefaults };