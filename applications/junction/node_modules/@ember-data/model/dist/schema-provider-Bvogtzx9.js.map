{"version":3,"file":"schema-provider-Bvogtzx9.js","sources":["../src/-private/model-for-mixin.ts","../src/-private/schema-provider.ts"],"sourcesContent":["import { getOwner } from '@ember/application';\n\nimport type Store from '@ember-data/store';\n\nimport { Model, type ModelFactory } from './model';\n\n/*\n    In case someone defined a relationship to a mixin, for example:\n    ```ts\n      class CommentModel extends Model {\n        @belongsTo('commentable', { polymorphic: true }) owner;\n      }\n\n      let Commentable = Mixin.create({\n        @hasMany('comment') comments;\n      });\n    ```\n    we want to look up a Commentable class which has all the necessary\n    relationship meta data. Thus, we look up the mixin and create a mock\n    Model, so we can access the relationship CPs of the mixin (`comments`)\n    in this case\n  */\nexport default function modelForMixin(store: Store, normalizedModelName: string): ModelFactory | undefined {\n  const owner = getOwner(store)!;\n  const MaybeMixin = owner.factoryFor(`mixin:${normalizedModelName}`);\n  const mixin = MaybeMixin && MaybeMixin.class;\n  if (mixin) {\n    const ModelForMixin = Model.extend(mixin) as unknown as { __isMixin: boolean; __mixin: typeof mixin };\n    ModelForMixin.__isMixin = true;\n    ModelForMixin.__mixin = mixin;\n    //Cache the class as a model\n    owner.register(`model:${normalizedModelName}`, ModelForMixin);\n  }\n  return owner.factoryFor(`model:${normalizedModelName}`) as ModelFactory | undefined;\n}\n","import { getOwner } from '@ember/application';\nimport { deprecate } from '@ember/debug';\n\nimport type Store from '@ember-data/store';\nimport type { SchemaService } from '@ember-data/store/types';\nimport { ENABLE_LEGACY_SCHEMA_SERVICE } from '@warp-drive/build-config/deprecations';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { RecordIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';\nimport type { ObjectValue } from '@warp-drive/core-types/json/raw';\nimport type { Derivation, HashFn, Transformation } from '@warp-drive/core-types/schema/concepts';\nimport type {\n  ArrayField,\n  DerivedField,\n  GenericField,\n  HashField,\n  LegacyAttributeField,\n  LegacyField,\n  LegacyRelationshipField,\n  ObjectField,\n  ObjectSchema,\n  ResourceSchema,\n} from '@warp-drive/core-types/schema/fields';\n\nimport type { FactoryCache, Model, ModelFactory, ModelStore } from './model';\nimport _modelForMixin from './model-for-mixin';\nimport { normalizeModelName } from './util';\n\ntype AttributesSchema = ReturnType<Exclude<SchemaService['attributesDefinitionFor'], undefined>>;\ntype RelationshipsSchema = ReturnType<Exclude<SchemaService['relationshipsDefinitionFor'], undefined>>;\n\ntype InternalSchema = {\n  schema: ResourceSchema;\n  fields: Map<string, LegacyAttributeField | LegacyRelationshipField>;\n  attributes: Record<string, LegacyAttributeField>;\n  relationships: Record<string, LegacyRelationshipField>;\n};\n\nexport interface ModelSchemaProvider {\n  attributesDefinitionFor(resource: RecordIdentifier | { type: string }): AttributesSchema;\n\n  relationshipsDefinitionFor(resource: RecordIdentifier | { type: string }): RelationshipsSchema;\n\n  doesTypeExist(type: string): boolean;\n}\nexport class ModelSchemaProvider implements SchemaService {\n  declare store: ModelStore;\n  declare _schemas: Map<string, InternalSchema>;\n  declare _typeMisses: Set<string>;\n\n  constructor(store: ModelStore) {\n    this.store = store;\n    this._schemas = new Map();\n    this._typeMisses = new Set();\n  }\n\n  resourceTypes(): Readonly<string[]> {\n    return Array.from(this._schemas.keys());\n  }\n\n  hasTrait(type: string): boolean {\n    assert(`hasTrait is not available with @ember-data/model's SchemaService`);\n    return false;\n  }\n  resourceHasTrait(resource: StableRecordIdentifier | { type: string }, trait: string): boolean {\n    assert(`resourceHasTrait is not available with @ember-data/model's SchemaService`);\n    return false;\n  }\n  transformation(field: GenericField | ObjectField | ArrayField | { type: string }): Transformation {\n    assert(`transformation is not available with @ember-data/model's SchemaService`);\n  }\n  derivation(field: DerivedField | { type: string }): Derivation {\n    assert(`derivation is not available with @ember-data/model's SchemaService`);\n  }\n  hashFn(field: HashField | { type: string }): HashFn {\n    assert(`hashFn is not available with @ember-data/model's SchemaService`);\n  }\n  resource(resource: StableRecordIdentifier | { type: string }): ResourceSchema | ObjectSchema {\n    const type = normalizeModelName(resource.type);\n\n    if (!this._schemas.has(type)) {\n      this._loadModelSchema(type);\n    }\n\n    return this._schemas.get(type)!.schema;\n  }\n  registerResources(schemas: Array<ResourceSchema | ObjectSchema>): void {\n    assert(`registerResources is not available with @ember-data/model's SchemaService`);\n  }\n  registerResource(schema: ResourceSchema | ObjectSchema): void {\n    assert(`registerResource is not available with @ember-data/model's SchemaService`);\n  }\n  registerTransformation(transform: Transformation): void {\n    assert(`registerTransformation is not available with @ember-data/model's SchemaService`);\n  }\n  registerDerivation<R, T, FM extends ObjectValue | null>(derivation: Derivation<R, T, FM>): void {\n    assert(`registerDerivation is not available with @ember-data/model's SchemaService`);\n  }\n  registerHashFn(hashFn: HashFn): void {\n    assert(`registerHashFn is not available with @ember-data/model's SchemaService`);\n  }\n  _loadModelSchema(type: string) {\n    const modelClass = this.store.modelFor(type) as typeof Model;\n    const attributeMap = modelClass.attributes;\n\n    const attributes = Object.create(null) as AttributesSchema;\n    attributeMap.forEach((meta, name) => (attributes[name] = meta));\n    const relationships = modelClass.relationshipsObject || null;\n    const fields = new Map<string, LegacyAttributeField | LegacyRelationshipField>();\n\n    for (const attr of Object.values(attributes)) {\n      fields.set(attr.name, attr);\n    }\n\n    for (const rel of Object.values(relationships)) {\n      fields.set(rel.name, rel);\n    }\n\n    const schema: ResourceSchema = {\n      legacy: true,\n      identity: { name: 'id', kind: '@id' },\n      type,\n      fields: Array.from(fields.values()),\n    };\n\n    const internalSchema: InternalSchema = {\n      schema,\n      attributes,\n      relationships,\n      fields,\n    };\n\n    this._schemas.set(type, internalSchema);\n\n    return internalSchema;\n  }\n\n  fields(resource: RecordIdentifier | { type: string }): Map<string, LegacyField> {\n    const type = normalizeModelName(resource.type);\n\n    if (!this._schemas.has(type)) {\n      this._loadModelSchema(type);\n    }\n\n    return this._schemas.get(type)!.fields;\n  }\n\n  hasResource(resource: { type: string }): boolean {\n    const type = normalizeModelName(resource.type);\n\n    if (this._schemas.has(type)) {\n      return true;\n    }\n\n    if (this._typeMisses.has(type)) {\n      return false;\n    }\n\n    const factory = getModelFactory(this.store, type);\n    const exists = factory !== null;\n\n    if (!exists) {\n      this._typeMisses.add(type);\n      return false;\n    }\n\n    return true;\n  }\n}\n\nif (ENABLE_LEGACY_SCHEMA_SERVICE) {\n  ModelSchemaProvider.prototype.doesTypeExist = function (type: string): boolean {\n    deprecate(`Use \\`schema.hasResource({ type })\\` instead of \\`schema.doesTypeExist(type)\\``, false, {\n      id: 'ember-data:schema-service-updates',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '4.13',\n        enabled: '5.4',\n      },\n    });\n    return this.hasResource({ type });\n  };\n\n  ModelSchemaProvider.prototype.attributesDefinitionFor = function (\n    resource: RecordIdentifier | { type: string }\n  ): AttributesSchema {\n    deprecate(`Use \\`schema.fields({ type })\\` instead of \\`schema.attributesDefinitionFor({ type })\\``, false, {\n      id: 'ember-data:schema-service-updates',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '4.13',\n        enabled: '5.4',\n      },\n    });\n    const type = normalizeModelName(resource.type);\n\n    if (!this._schemas.has(type)) {\n      this._loadModelSchema(type);\n    }\n\n    return this._schemas.get(type)!.attributes;\n  };\n\n  ModelSchemaProvider.prototype.relationshipsDefinitionFor = function (\n    resource: RecordIdentifier | { type: string }\n  ): RelationshipsSchema {\n    deprecate(`Use \\`schema.fields({ type })\\` instead of \\`schema.relationshipsDefinitionFor({ type })\\``, false, {\n      id: 'ember-data:schema-service-updates',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '4.13',\n        enabled: '5.4',\n      },\n    });\n    const type = normalizeModelName(resource.type);\n\n    if (!this._schemas.has(type)) {\n      this._loadModelSchema(type);\n    }\n\n    return this._schemas.get(type)!.relationships;\n  };\n}\n\nexport function buildSchema(store: Store): SchemaService {\n  return new ModelSchemaProvider(store as ModelStore);\n}\n\nexport function getModelFactory(store: ModelStore, type: string): ModelFactory | null {\n  if (!store._modelFactoryCache) {\n    store._modelFactoryCache = Object.create(null) as FactoryCache;\n  }\n  const cache = store._modelFactoryCache;\n  let factory: ModelFactory | undefined = cache[type];\n\n  if (!factory) {\n    const owner = getOwner(store)!;\n    factory = owner.factoryFor(`model:${type}`) as ModelFactory | undefined;\n\n    if (!factory) {\n      //Support looking up mixins as base types for polymorphic relationships\n      factory = _modelForMixin(store, type);\n    }\n\n    if (!factory) {\n      // we don't cache misses in case someone wants to register a missing model\n      return null;\n    }\n\n    const klass = factory.class;\n\n    if (klass.isModel) {\n      const hasOwnModelNameSet = klass.modelName && Object.prototype.hasOwnProperty.call(klass, 'modelName');\n      if (!hasOwnModelNameSet) {\n        Object.defineProperty(klass, 'modelName', { value: type });\n      }\n    }\n\n    cache[type] = factory;\n  }\n\n  return factory;\n}\n"],"names":["modelForMixin","store","normalizedModelName","owner","getOwner","MaybeMixin","factoryFor","mixin","class","ModelForMixin","Model","extend","__isMixin","__mixin","register","ModelSchemaProvider","constructor","_schemas","Map","_typeMisses","Set","resourceTypes","Array","from","keys","hasTrait","type","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","resourceHasTrait","resource","trait","transformation","field","derivation","hashFn","normalizeModelName","has","_loadModelSchema","get","schema","registerResources","schemas","registerResource","registerTransformation","transform","registerDerivation","registerHashFn","modelClass","modelFor","attributeMap","attributes","Object","create","forEach","meta","name","relationships","relationshipsObject","fields","attr","values","set","rel","legacy","identity","kind","internalSchema","hasResource","factory","getModelFactory","exists","add","deprecations","ENABLE_LEGACY_SCHEMA_SERVICE","prototype","doesTypeExist","deprecate","id","until","for","since","available","enabled","attributesDefinitionFor","relationshipsDefinitionFor","buildSchema","_modelFactoryCache","cache","_modelForMixin","klass","isModel","hasOwnModelNameSet","modelName","hasOwnProperty","call","defineProperty","value"],"mappings":"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"}