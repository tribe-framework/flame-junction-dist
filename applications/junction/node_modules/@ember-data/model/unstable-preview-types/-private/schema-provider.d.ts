declare module '@ember-data/model/-private/schema-provider' {
  import type Store from '@ember-data/store';
  import type { SchemaService } from '@ember-data/store/types';
  import type { RecordIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';
  import type { ObjectValue } from '@warp-drive/core-types/json/raw';
  import type { Derivation, HashFn, Transformation } from '@warp-drive/core-types/schema/concepts';
  import type { ArrayField, DerivedField, GenericField, HashField, LegacyAttributeField, LegacyField, LegacyRelationshipField, ObjectField, ObjectSchema, ResourceSchema } from '@warp-drive/core-types/schema/fields';
  import type { ModelFactory, ModelStore } from '@ember-data/model/-private/model';
  type AttributesSchema = ReturnType<Exclude<SchemaService['attributesDefinitionFor'], undefined>>;
  type RelationshipsSchema = ReturnType<Exclude<SchemaService['relationshipsDefinitionFor'], undefined>>;
  type InternalSchema = {
      schema: ResourceSchema;
      fields: Map<string, LegacyAttributeField | LegacyRelationshipField>;
      attributes: Record<string, LegacyAttributeField>;
      relationships: Record<string, LegacyRelationshipField>;
  };
  export interface ModelSchemaProvider {
      attributesDefinitionFor(resource: RecordIdentifier | {
          type: string;
      }): AttributesSchema;
      relationshipsDefinitionFor(resource: RecordIdentifier | {
          type: string;
      }): RelationshipsSchema;
      doesTypeExist(type: string): boolean;
  }
  export class ModelSchemaProvider implements SchemaService {
      store: ModelStore;
      _schemas: Map<string, InternalSchema>;
      _typeMisses: Set<string>;
      constructor(store: ModelStore);
      resourceTypes(): Readonly<string[]>;
      hasTrait(type: string): boolean;
      resourceHasTrait(resource: StableRecordIdentifier | {
          type: string;
      }, trait: string): boolean;
      transformation(field: GenericField | ObjectField | ArrayField | {
          type: string;
      }): Transformation;
      derivation(field: DerivedField | {
          type: string;
      }): Derivation;
      hashFn(field: HashField | {
          type: string;
      }): HashFn;
      resource(resource: StableRecordIdentifier | {
          type: string;
      }): ResourceSchema | ObjectSchema;
      registerResources(schemas: Array<ResourceSchema | ObjectSchema>): void;
      registerResource(schema: ResourceSchema | ObjectSchema): void;
      registerTransformation(transform: Transformation): void;
      registerDerivation<R, T, FM extends ObjectValue | null>(derivation: Derivation<R, T, FM>): void;
      registerHashFn(hashFn: HashFn): void;
      _loadModelSchema(type: string): InternalSchema;
      fields(resource: RecordIdentifier | {
          type: string;
      }): Map<string, LegacyField>;
      hasResource(resource: {
          type: string;
      }): boolean;
  }
  export function buildSchema(store: Store): SchemaService;
  export function getModelFactory(store: ModelStore, type: string): ModelFactory | null;
  export {};
}
//# sourceMappingURL=schema-provider.d.ts.map