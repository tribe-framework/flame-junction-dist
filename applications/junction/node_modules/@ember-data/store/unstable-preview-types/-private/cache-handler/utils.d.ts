declare module '@ember-data/store/-private/cache-handler/utils' {
  import type { StableDocumentIdentifier } from '@warp-drive/core-types/identifier';
  import type { ImmutableCreateRequestOptions, ImmutableDeleteRequestOptions, ImmutableRequestInfo, ImmutableUpdateRequestOptions, StructuredDataDocument } from '@warp-drive/core-types/request';
  import type { ResourceDataDocument, ResourceErrorDocument } from '@warp-drive/core-types/spec/document';
  import type { ApiError } from '@warp-drive/core-types/spec/error';
  import type { Store } from '@ember-data/store/-private/store-service';
  export const MUTATION_OPS: Set<string>;
  export function calcShouldFetch(store: Store, request: ImmutableRequestInfo, hasCachedValue: boolean, identifier: StableDocumentIdentifier | null): boolean;
  export function calcShouldBackgroundFetch(store: Store, request: ImmutableRequestInfo, willFetch: boolean, identifier: StableDocumentIdentifier | null): boolean;
  export function isMutation(request: Partial<ImmutableRequestInfo>): request is ImmutableUpdateRequestOptions | ImmutableCreateRequestOptions | ImmutableDeleteRequestOptions;
  export function isCacheAffecting<T>(document: StructuredDataDocument<T>): boolean;
  export function isAggregateError(error: Error & {
      errors?: ApiError[];
  }): error is AggregateError & {
      errors: ApiError[];
  };
  export type RobustError = Error & {
      error: string | object;
      errors?: ApiError[];
      content?: unknown;
  };
  export function cloneError(error: RobustError): RobustError;
  export function isErrorDocument(document: ResourceDataDocument | ResourceErrorDocument): document is ResourceErrorDocument;
  export function getPriority(identifier: StableDocumentIdentifier | null, deduped: Map<StableDocumentIdentifier, {
      priority: {
          blocking: boolean;
      };
  }>, priority: {
      blocking: boolean;
  }): {
      blocking: boolean;
  };
}
//# sourceMappingURL=utils.d.ts.map