declare module '@ember-data/store/-private/caches/instance-cache' {
  import type { Cache } from '@warp-drive/core-types/cache';
  import type { StableDocumentIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';
  import type { Value } from '@warp-drive/core-types/json/raw';
  import type { TypedRecordInstance, TypeFromInstance } from '@warp-drive/core-types/record';
  import type { OpaqueRecordInstance } from '@ember-data/store/-types/q/record-instance';
  import { ReactiveDocument } from '@ember-data/store/-private/document';
  import RecordReference from '@ember-data/store/-private/legacy-model-support/record-reference';
  import { CacheCapabilitiesManager } from '@ember-data/store/-private/managers/cache-capabilities-manager';
  import type { CacheManager } from '@ember-data/store/-private/managers/cache-manager';
  import type { CreateRecordProperties, Store } from '@ember-data/store/-private/store-service';
  export function peekRecordIdentifier(record: OpaqueRecordInstance): StableRecordIdentifier | undefined;
  /**
    Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)
    assigned to the given record instance.
    ```js
    import { recordIdentifierFor } from "@ember-data/store";
    // ... gain access to a record, for instance with peekRecord or findRecord
    const record = store.peekRecord("user", "1");
    // get the identifier for the record (see docs for StableRecordIdentifier)
    const identifier = recordIdentifierFor(record);
    // access the identifier's properties.
    const { id, type, lid } = identifier;
    ```
    @method recordIdentifierFor
    @public
    @static
    @for @ember-data/store
    @param {Object} record a record instance previously obstained from the store.
    @return {StableRecordIdentifier}
   */
  export function recordIdentifierFor<T extends TypedRecordInstance>(record: T): StableRecordIdentifier<TypeFromInstance<T>>;
  export function recordIdentifierFor(record: OpaqueRecordInstance): StableRecordIdentifier;
  export function setRecordIdentifier(record: OpaqueRecordInstance, identifier: StableRecordIdentifier): void;
  export const StoreMap: Map<unknown, Store>;
  export function storeFor(record: OpaqueRecordInstance): Store | undefined;
  type Caches = {
      record: Map<StableRecordIdentifier, OpaqueRecordInstance>;
      reference: WeakMap<StableRecordIdentifier, RecordReference>;
      document: Map<StableDocumentIdentifier, ReactiveDocument<OpaqueRecordInstance | OpaqueRecordInstance[] | null | undefined>>;
  };
  export class InstanceCache {
      store: Store;
      cache: Cache;
      _storeWrapper: CacheCapabilitiesManager;
      __cacheManager: CacheManager;
      __instances: Caches;
      constructor(store: Store);
      peek(identifier: StableRecordIdentifier): Cache | OpaqueRecordInstance | undefined;
      getDocument<T>(identifier: StableDocumentIdentifier): ReactiveDocument<T>;
      getRecord(identifier: StableRecordIdentifier, properties?: CreateRecordProperties): OpaqueRecordInstance;
      getReference(identifier: StableRecordIdentifier): RecordReference;
      recordIsLoaded(identifier: StableRecordIdentifier, filterDeleted?: boolean): boolean;
      disconnect(identifier: StableRecordIdentifier): void;
      unloadRecord(identifier: StableRecordIdentifier): void;
      clear(type?: string): void;
      setRecordId(identifier: StableRecordIdentifier, id: string): void;
  }
  export function resourceIsFullyDeleted(instanceCache: InstanceCache, identifier: StableRecordIdentifier): boolean;
  export function preloadData(store: Store, identifier: StableRecordIdentifier, preload: Record<string, Value>): void;
  export function _clearCaches(): void;
  export {};
}
//# sourceMappingURL=instance-cache.d.ts.map