{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AddonInstance,\n  AddonMeta,\n  PackageInfo,\n  isDeepAddonInstance,\n} from '@embroider/shared-internals';\nimport buildFunnel from 'broccoli-funnel';\nimport commonAncestorPath from 'common-ancestor-path';\nimport { readFileSync } from 'fs';\nimport { dirname, isAbsolute, join, normalize, relative, resolve } from 'path';\nimport { satisfies } from 'semver';\n\nexport interface ShimOptions {\n  disabled?: (options: any) => boolean;\n\n  // this part only applies when running under ember-auto-import. It's intended\n  // to let a V2 addon tweak how it's interpreted by ember-auto-import inside\n  // the classic build in order to achieve backward compatibility with how it\n  // behaved as a V1 addon.\n  autoImportCompat?: {\n    // can modify the `ember-addon` metadata that ember-auto-import is using to\n    // do resolution. Right now that means the `renamed-modules`.\n    customizeMeta?: (meta: AddonMeta) => AddonMeta;\n  };\n}\n\nfunction addonMeta(pkgJSON: PackageInfo): AddonMeta {\n  let meta = pkgJSON['ember-addon'];\n  if (meta?.version !== 2) {\n    throw new Error(`did not find valid v2 addon metadata in ${pkgJSON.name}`);\n  }\n  return meta as AddonMeta;\n}\n\ntype OwnType = AddonInstance & {\n  _eaiAssertions(): void;\n  _internalRegisterV2Addon(\n    name: string,\n    root: string,\n    autoImportCompat?: ShimOptions['autoImportCompat']\n  ): void;\n  _parentName(): string;\n};\n\nexport function addonV1Shim(directory: string, options: ShimOptions = {}) {\n  let pkg: PackageInfo = JSON.parse(\n    readFileSync(resolve(directory, './package.json'), 'utf8')\n  );\n\n  let meta = addonMeta(pkg);\n  let disabled = false;\n\n  function treeFor(\n    addonInstance: AddonInstance,\n    resourceMap: Record<string, string>,\n    // default expectation is for resourceMap to map from interior to exterior, swap if needed\n    swapInteriorExterior = false\n  ) {\n    const absoluteInteriorPaths = Object[\n      swapInteriorExterior ? 'values' : 'keys'\n    ](resourceMap).map((internalPath) => join(directory, internalPath));\n\n    if (absoluteInteriorPaths.length === 0) {\n      return;\n    }\n\n    const ancestorPath =\n      commonAncestorPath(...absoluteInteriorPaths.map(dirname)) ?? directory;\n    const ancestorPathRel = relative(directory, ancestorPath);\n    const ancestorTree = addonInstance.treeGenerator(ancestorPath);\n    const relativeInteriorPaths = absoluteInteriorPaths.map((absPath) =>\n      relative(ancestorPath, absPath)\n    );\n\n    return buildFunnel(ancestorTree, {\n      files: relativeInteriorPaths,\n      getDestinationPath(relativePath: string): string {\n        for (let [a, b] of Object.entries(resourceMap)) {\n          const interiorName = swapInteriorExterior ? b : a;\n          const exteriorName = swapInteriorExterior ? a : b;\n          if (join(ancestorPathRel, relativePath) === normalize(interiorName)) {\n            return exteriorName;\n          }\n        }\n        throw new Error(\n          `bug in addonV1Shim, no match for ${relativePath} in ${JSON.stringify(\n            resourceMap\n          )}`\n        );\n      },\n    });\n  }\n\n  return {\n    name: pkg.name,\n    included(this: OwnType, ...args: unknown[]) {\n      let parentOptions;\n      if (isDeepAddonInstance(this)) {\n        parentOptions = this.parent.options;\n      } else {\n        parentOptions = this.app.options;\n      }\n\n      this._eaiAssertions();\n      this._internalRegisterV2Addon(\n        this.name,\n        directory,\n        options.autoImportCompat\n      );\n\n      if (options.disabled) {\n        disabled = options.disabled(parentOptions);\n      }\n\n      // this is at the end so we can find our own autoImportInstance before any\n      // deeper v2 addons ask us to forward registrations upward to it\n      this._super.included.apply(this, args);\n    },\n\n    treeForApp(this: AddonInstance) {\n      if (disabled) {\n        return undefined;\n      }\n      let maybeAppJS = meta['app-js'];\n      if (maybeAppJS) {\n        return treeFor(this, maybeAppJS, true);\n      }\n    },\n\n    treeForAddon() {\n      // this never goes through broccoli -- it's always pulled into the app via\n      // ember-auto-import, as needed. This means it always benefits from\n      // tree-shaking.\n      return undefined;\n    },\n\n    treeForPublic(this: AddonInstance) {\n      if (disabled) {\n        return undefined;\n      }\n      let maybeAssets = meta['public-assets'];\n      if (maybeAssets) {\n        return treeFor(this, maybeAssets);\n      }\n    },\n\n    cacheKeyForTree(this: AddonInstance, treeType: string): string {\n      return `embroider-addon-shim/${treeType}/${directory}`;\n    },\n\n    isDevelopingAddon(this: AddonInstance) {\n      // if the app is inside our own directory, we must be under development.\n      // This setting controls whether ember-cli will watch for changes in the\n      // broccoli trees we expose, but it doesn't have any control over our\n      // files that get auto-imported into the app. For that, you should use\n      // ember-auto-import's watchDependencies option (and this should become\n      // part of the blueprint for test apps).\n      let appInstance = this._findHost();\n      return isInside(directory, appInstance.project.root);\n    },\n\n    _eaiAssertions(this: OwnType) {\n      // if we're being used by a v1 package, that package needs ember-auto-import 2\n      if ((this.parent.pkg['ember-addon']?.version ?? 1) < 2) {\n        // important: here we're talking about the version of ember-auto-import\n        // declared by the package that is trying to use our V2 addon. Which is\n        // distinct from the version that may be installed in the top-level app,\n        // and which is also distinct from the elected ember-auto-import leader.\n        let autoImport = locateAutoImport(this.parent.addons);\n        if (!autoImport.present) {\n          throw new Error(\n            `${this._parentName()} needs to depend on ember-auto-import in order to use ${\n              this.name\n            }`\n          );\n        }\n        if (!autoImport.satisfiesV2) {\n          throw new Error(\n            `${this._parentName()} has ember-auto-import ${\n              autoImport.version\n            } which is not new enough to use ${\n              this.name\n            }. It needs to upgrade to >=2.0`\n          );\n        }\n      }\n    },\n\n    _internalRegisterV2Addon(\n      this: OwnType,\n      name: string,\n      root: string,\n      options?: ShimOptions['autoImportCompat']\n    ) {\n      // this is searching the top-level app for ember-auto-import, which is\n      // different from how we searched above in _eaiAssertions. We're going\n      // straight to the top because we definitely want to locate EAI if it's\n      // present, but our addon's immediate parent won't necessarily have EAI if\n      // that parent is itself a V2 addon.\n      let autoImport = locateAutoImport(this.project.addons);\n      if (!autoImport.present || !autoImport.satisfiesV2) {\n        // We don't assert here because it's not our responsibility. In\n        // _eaiAssertions we check the condition of our immediate parent, which\n        // makes the error messages more actionable. If our parent has EAI>=2,\n        // its copy of EAI will in turn assert that the app has one as well.\n        //\n        // This case is actually fine for a v2 app under Embroider, where EAI is\n        // not needed.\n        return;\n      }\n\n      // we're not using autoImport.instance.registerV2Addon because not all 2.x\n      // versions will forward the third argument to the current leader. Whereas\n      // we can confidently ensure that the leader itself supports the third\n      // argument by adding it as a dependency of our V2 addon, since the newest\n      // copy that satisfies the app's requested semver range will win the\n      // election.\n\n      let leader: ReturnType<NonNullable<EAI2Instance['leader']>>;\n      if (autoImport.instance.leader) {\n        // sufficiently new EAI lets us directly ask for the leader\n        leader = autoImport.instance.leader();\n      } else {\n        // otherwise we need to reach inside\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        let AutoImport = require(join(\n          autoImport.instance.root,\n          'auto-import.js'\n        )).default;\n        leader = AutoImport.lookup(autoImport.instance);\n      }\n\n      leader.registerV2Addon(name, root, options);\n    },\n\n    _parentName(this: OwnType): string {\n      if (isDeepAddonInstance(this)) {\n        return this.parent.name;\n      } else {\n        return this.parent.name();\n      }\n    },\n\n    // This continues to exist because there are earlier versions of addon-shim\n    // that forward v2 addon registration through their parent V2 addon, thus\n    // calling this method.\n    registerV2Addon(this: OwnType, name: string, root: string): void {\n      this._internalRegisterV2Addon(name, root);\n    },\n  };\n}\n\nfunction isInside(parentDir: string, otherDir: string): boolean {\n  let rel = relative(parentDir, otherDir);\n  return Boolean(rel) && !rel.startsWith('..') && !isAbsolute(rel);\n}\n\ntype EAI2Instance = AddonInstance & {\n  // all 2.x versions of EAI have this method\n  registerV2Addon(name: string, root: string): void;\n\n  // EAI >= 2.10.0 offers this API, which is intended to be more extensible\n  // since it lets you talk directly to the current leader. That's better\n  // because the newest version of EAI present becomes the leader, so you can\n  // guarantee a minimum leader version by making it your own dependency.\n  leader?: () => {\n    registerV2Addon(\n      name: string,\n      root: string,\n      options?: ShimOptions['autoImportCompat']\n    ): void;\n  };\n};\n\nfunction locateAutoImport(addons: AddonInstance[]):\n  | { present: false }\n  | {\n      present: true;\n      version: string;\n      satisfiesV2: false;\n    }\n  | {\n      present: true;\n      version: string;\n      satisfiesV2: true;\n      instance: EAI2Instance;\n    } {\n  let instance = addons.find((a) => a.name === 'ember-auto-import');\n  if (!instance) {\n    return { present: false };\n  }\n  let version = instance.pkg.version;\n  let satisfiesV2 = satisfies(version, '>=2.0.0-alpha.0', {\n    includePrerelease: true,\n  });\n  if (satisfiesV2) {\n    return {\n      present: true,\n      version,\n      satisfiesV2,\n      instance: instance as EAI2Instance,\n    };\n  } else {\n    return {\n      present: true,\n      version,\n      satisfiesV2,\n    };\n  }\n}\n"]}