{"version":3,"file":"babel.js","sourceRoot":"","sources":["babel.ts"],"names":[],"mappings":";;;;;AAiDA,kCAiCC;AAlFD,oEAA2C;AAiD3C,SAAgB,WAAW,CAAC,UAAmB,EAAE;IAC/C,IAAI,IAAI,GAAG,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;IACxC,IAAI,MAAM,GAAG,uBAAY,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAExC,IAAI,UAAU,GAAG,uBAAY,CAAC,UAAU,EAAE,CAAC;IAE3C,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAE7B,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAErD,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,SAAS,EAAE,CAAC;QACd,KAAK,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,MAAgB,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,MAAM,CAAC,CAAC;IAEpB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;QAC3C,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC/C,MAAM,CAAC,iBAAiB,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,QAAQ,EAAE,CAAC;IAElB,OAAO;QACL,WAAW,EAAE,MAAM,CAAC,iBAAiB,EAAE;QACvC,cAAc,EAAE,UAAU,CAAC,OAAO;KACnC,CAAC;AACJ,CAAC","sourcesContent":["import MacrosConfig from './macros-config';\n\nexport interface Options {\n  /**\n   * How you configure your own package / app\n   */\n  setOwnConfig?: object;\n  /**\n   * This is how you can optionally send configuration into\n   * your dependencies, if those dependencies choose to use\n   * @embroider/macros configs.\n   *\n   * @example\n   * ```js\n   * setConfig: {\n   *   'some-dependency': {\n   *      // config for some-dependency\n   *   }\n   * }\n   * ```\n   */\n  setConfig?: Record<string, object>;\n\n  /**\n   * Callback for further manipulation of the macros' configuration instance.\n   *\n   * Useful for libraries to provide their own config with defaults shared between sub-dependencies of those libraries.\n   */\n  configure?: (macrosInstance: MacrosConfig) => void;\n\n  /**\n   * Override the default directory used for the MacrosConfig\n   *\n   * defaults to the CWD, via process.cwd()\n   */\n  dir?: string;\n}\n\ninterface ConfiguredMacros {\n  /**\n   * Array of plugins to add to the babel config plugins array\n   */\n  babelMacros: ReturnType<MacrosConfig['babelPluginConfig']>;\n  /**\n   * Array of template transforms to pass to the transforms array of the babel-plugin-ember-template-compilation babel plugin\n   */\n  templateMacros: ReturnType<(typeof MacrosConfig)['transforms']>['plugins'];\n}\n\nexport function buildMacros(options: Options = {}): ConfiguredMacros {\n  let root = options.dir || process.cwd();\n  let macros = MacrosConfig.for({}, root);\n\n  let transforms = MacrosConfig.transforms();\n\n  transforms.setConfig(macros);\n\n  let { setOwnConfig, setConfig, configure } = options;\n\n  if (setOwnConfig) {\n    macros.setOwnConfig(root, setOwnConfig);\n  }\n\n  if (setConfig) {\n    for (let [packageName, config] of Object.entries(setConfig)) {\n      macros.setConfig(root, packageName, config as object);\n    }\n  }\n\n  configure?.(macros);\n\n  if (process.env.NODE_ENV === 'development') {\n    macros.enablePackageDevelopment(process.cwd());\n    macros.enableRuntimeMode();\n  }\n\n  macros.finalize();\n\n  return {\n    babelMacros: macros.babelPluginConfig(),\n    templateMacros: transforms.plugins,\n  };\n}\n"]}