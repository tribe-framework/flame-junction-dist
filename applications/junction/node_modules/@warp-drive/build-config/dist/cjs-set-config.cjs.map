{"version":3,"file":"cjs-set-config.cjs","sources":["../src/-private/utils/get-env.ts","../src/deprecation-versions.ts","../src/-private/utils/deprecations.ts","../src/canary-features.ts","../src/-private/utils/features.ts","../src/debugging.ts","../src/-private/utils/logging.ts","../src/index.ts"],"sourcesContent":["export function getEnv(): {\n  TESTING: boolean;\n  PRODUCTION: boolean;\n  DEBUG: boolean;\n  IS_RECORDING: boolean;\n  IS_CI: boolean;\n  SHOULD_RECORD: boolean;\n} {\n  const { EMBER_ENV, IS_TESTING, EMBER_CLI_TEST_COMMAND, NODE_ENV, CI, IS_RECORDING } = process.env;\n  const PRODUCTION = EMBER_ENV === 'production' || (!EMBER_ENV && NODE_ENV === 'production');\n  const DEBUG = !PRODUCTION;\n  const TESTING = DEBUG || Boolean(EMBER_ENV === 'test' || IS_TESTING || EMBER_CLI_TEST_COMMAND);\n  const SHOULD_RECORD = Boolean(!CI || IS_RECORDING);\n\n  return {\n    TESTING,\n    PRODUCTION,\n    DEBUG,\n    IS_RECORDING: Boolean(IS_RECORDING),\n    IS_CI: Boolean(CI),\n    SHOULD_RECORD,\n  };\n}\n","/**\n * @module @warp-drive/build-config\n */\n// ========================\n// FOR CONTRIBUTING AUTHORS\n//\n// Deprecations here should also have guides PR'd to the emberjs deprecation app\n//\n// github: https://github.com/ember-learn/deprecation-app\n// website: https://deprecations.emberjs.com\n//\n// Each deprecation should also be given an associated URL pointing to the\n// relevant guide.\n//\n// URLs should be of the form: https://deprecations.emberjs.com/v<major>.x#toc_<fileName>\n// where <major> is the major version of the deprecation and <fileName> is the\n// name of the markdown file in the guides repo.\n//\n// ========================\n//\n\n/**\n * ## Deprecation Management\n *\n * EmberData allows users to opt-in and remove code that exists to support deprecated\n * behaviors.\n *\n * If your app has resolved all deprecations present in a given version,\n * you may specify that version as your \"compatibility\" version to remove\n * the code that supported the deprecated behavior from your app.\n *\n * For instance, if a deprecation was introduced in 3.13, and the app specifies\n * 3.13 as its minimum version compatibility, any deprecations introduced before\n * or during 3.13 would be stripped away.\n *\n * An app can use a different version than what it specifies as it's compatibility\n * version. For instance, an App could be using `3.16` while specifying compatibility\n * with `3.12`. This would remove any deprecations that were present in or before `3.12`\n * but keep support for anything deprecated in or above `3.13`.\n *\n * You may also specify that specific deprecations are resolved. These approaches\n * may be used together.\n *\n * ```ts\n * setConfig(app, __dirname, {\n *   // declare that all deprecations through \"5.0\" have been fully resolved\n *   compatWith: '5.0',\n *\n *   // mark individual deprecations as resolved by setting them to `false`\n *   deprecations: {\n *     // resolve individual deprecations here\n *   },\n * });\n * ```\n *\n * > [!TIP]\n * > EmberData does not test against permutations of deprecations\n * > being stripped, our tests run against \"all deprecated code included\"\n * > and \"all deprecated code removed\". Unspecified behavior may sometimes occur\n * > when removing code for only some deprecations associated to a version number.\n *\n * @class CurrentDeprecations\n * @public\n */\nexport const DEPRECATE_CATCH_ALL = '99.0';\n/**\n * **id: ember-data:deprecate-non-strict-types**\n *\n * Currently, EmberData expects that the `type` property associated with\n * a resource follows several conventions.\n *\n * - The `type` property must be a non-empty string\n * - The `type` property must be singular\n * - The `type` property must be dasherized\n *\n * We are deprecating support for types that do not match this pattern\n * in order to unlock future improvements in which we can support `type`\n * being any string of your choosing.\n *\n * The goal is that in the future, you will be able to use any string\n * so long as it matches what your configured cache, identifier generation,\n * and schemas expect.\n *\n * E.G. It will matter not that your string is in a specific format like\n * singular, dasherized, etc. so long as everywhere you refer to the type\n * you use the same string.\n *\n * If using @ember-data/model, there will always be a restriction that the\n * `type` must match the path on disk where the model is defined.\n *\n * e.g. `app/models/foo/bar-bem.js` must have a type of `foo/bar-bem`\n *\n * @property DEPRECATE_NON_STRICT_TYPES\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_STRICT_TYPES = '5.3';\n\n/**\n * **id: ember-data:deprecate-non-strict-id**\n *\n * Currently, EmberData expects that the `id` property associated with\n * a resource is a string.\n *\n * However, for legacy support in many locations we would accept a number\n * which would then immediately be coerced into a string.\n *\n * We are deprecating this legacy support for numeric IDs.\n *\n * The goal is that in the future, you will be able to use any ID format\n * so long as everywhere you refer to the ID you use the same format.\n *\n * However, for identifiers we will always use string IDs and so any\n * custom identifier configuration should provide a string ID.\n *\n * @property DEPRECATE_NON_STRICT_ID\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_STRICT_ID = '5.3';\n\n/**\n * **id: <none yet assigned>**\n *\n * This is a planned deprecation which will trigger when observer or computed\n * chains are used to watch for changes on any EmberData LiveArray, CollectionRecordArray,\n * ManyArray or PromiseManyArray.\n *\n * Support for these chains is currently guarded by the deprecation flag\n * listed here, enabling removal of the behavior if desired.\n *\n * @property DEPRECATE_COMPUTED_CHAINS\n * @since 5.0\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_COMPUTED_CHAINS = '5.0';\n\n/**\n * **id: ember-data:deprecate-legacy-imports**\n *\n * Deprecates when importing from `ember-data/*` instead of `@ember-data/*`\n * in order to prepare for the eventual removal of the legacy `ember-data/*`\n *\n * All imports from `ember-data/*` should be updated to `@ember-data/*`\n * except for `ember-data/store`. When you are using `ember-data` (as opposed to\n * installing the indivudal packages) you should import from `ember-data/store`\n * instead of `@ember-data/store` in order to receive the appropriate configuration\n * of defaults.\n *\n * @property DEPRECATE_LEGACY_IMPORTS\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_LEGACY_IMPORTS = '5.3';\n\n/**\n * **id: ember-data:deprecate-non-unique-collection-payloads**\n *\n * Deprecates when the data for a hasMany relationship contains\n * duplicate identifiers.\n *\n * Previously, relationships would silently de-dupe the data\n * when received, but this behavior is being removed in favor\n * of erroring if the same related record is included multiple\n * times.\n *\n * For instance, in JSON:API the below relationship data would\n * be considered invalid:\n *\n * ```json\n * {\n *  \"data\": {\n *   \"type\": \"article\",\n *    \"id\": \"1\",\n *    \"relationships\": {\n *      \"comments\": {\n *        \"data\": [\n *          { \"type\": \"comment\", \"id\": \"1\" },\n *          { \"type\": \"comment\", \"id\": \"2\" },\n *          { \"type\": \"comment\", \"id\": \"1\" } // duplicate\n *        ]\n *     }\n *  }\n * }\n * ```\n *\n * To resolve this deprecation, either update your server to\n * not include duplicate data, or implement normalization logic\n * in either a request handler or serializer which removes\n * duplicate data from relationship payloads.\n *\n * @property DEPRECATE_NON_UNIQUE_PAYLOADS\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_NON_UNIQUE_PAYLOADS = '5.3';\n\n/**\n * **id: ember-data:deprecate-relationship-remote-update-clearing-local-state**\n *\n * Deprecates when a relationship is updated remotely and the local state\n * is cleared of all changes except for \"new\" records.\n *\n * Instead, any records not present in the new payload will be considered\n * \"removed\" while any records present in the new payload will be considered \"added\".\n *\n * This allows us to \"commit\" local additions and removals, preserving any additions\n * or removals that are not yet reflected in the remote state.\n *\n * For instance, given the following initial state:\n *\n * remote: A, B, C\n * local: add D, E\n *        remove B, C\n * => A, D, E\n *\n *\n * If after an update, the remote state is now A, B, D, F then the new state will be\n *\n * remote: A, B, D, F\n * local: add E\n *        remove B\n * => A, D, E, F\n *\n * Under the old behavior the updated local state would instead have been\n * => A, B, D, F\n *\n * Similarly, if a belongsTo remote State was A while its local state was B,\n * then under the old behavior if the remote state changed to C, the local state\n * would be updated to C. Under the new behavior, the local state would remain B.\n *\n * If the remote state was A while its local state was `null`, then under the old\n * behavior if the remote state changed to C, the local state would be updated to C.\n * Under the new behavior, the local state would remain `null`.\n *\n * Thus the new correct mental model is that the state of the relationship at any point\n * in time is whatever the most recent remote state is, plus any local additions or removals\n * you have made that have not yet been reflected by the remote state.\n *\n * > Note: The old behavior extended to modifying the inverse of a relationship. So if\n * > you had local state not reflected in the new remote state, inverses would be notified\n * > and their state reverted as well when \"resetting\" the relationship.\n * > Under the new behavior, since the local state is preserved the inverses will also\n * > not be reverted.\n *\n * ### Resolving this deprecation\n *\n * Resolving this deprecation can be done individually for each relationship\n * or globally for all relationships.\n *\n * To resolve it globally, set the `DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE`\n * to `false` in ember-cli-build.js\n *\n * ```js\n * const { setConfig } = await import('@warp-drive/build-config');\n *\n * let app = new EmberApp(defaults, {});\n *\n * setConfig(app, __dirname, {\n *   deprecations: {\n *     // set to false to strip the deprecated code (thereby opting into the new behavior)\n *     DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE: false\n *   }\n * });\n * ```\n *\n * To resolve this deprecation on an individual relationship, adjust the `options` passed to\n * the relationship. For relationships with inverses, both sides MUST be migrated to the new\n * behavior at the same time.\n *\n * ```js\n * class Person extends Model {\n *  @hasMany('person', {\n *    async: false,\n *    inverse: null,\n *    resetOnRemoteUpdate: false\n *  }) children;\n *\n *  @belongsTo('person', {\n *    async: false,\n *    inverse: null,\n *    resetOnRemoteUpdate: false\n *  }) parent;\n * }\n * ```\n *\n * > Note: false is the only valid value here, all other values (including missing)\n * > will be treated as true, where `true` is the legacy behavior that is now deprecated.\n *\n * Once you have migrated all relationships, you can remove the the resetOnRemoteUpdate\n * option and set the deprecation flag to false in ember-cli-build.\n *\n * ### What if I don't want the new behavior?\n *\n * EmberData's philosophy is to not make assumptions about your application. Where possible\n * we seek out \"100%\" solutions – solutions that work for all use cases - and where that is\n * not possible we default to \"90%\" solutions – solutions that work for the vast majority of use\n * cases. In the case of \"90%\" solutions we look for primitives that allow you to resolve the\n * 10% case in your application. If no such primitives exist, we provide an escape hatch that\n * ensures you can build the behavior you need without adopting the cost of the default solution.\n *\n * In this case, the old behavior was a \"40%\" solution. The inability for an application developer\n * to determine what changes were made locally, and thus what changes should be preserved, made\n * it impossible to build certain features easily, or in some cases at all. The proliferation of\n * feature requests, bug reports (from folks surprised by the prior behavior) and addon attempts\n * in this space are all evidence of this.\n *\n * We believe the new behavior is a \"90%\" solution. It works for the vast majority of use cases,\n * often without noticeable changes to existing application behavior, and provides primitives that\n * allow you to build the behavior you need for the remaining 10%.\n *\n * The great news is that this behavior defaults to trusting your API similar to the old behavior.\n * If your API is correct, you will not need to make any changes to your application to adopt\n * the new behavior.\n *\n * This means the 10% cases are those where you can't trust your API to provide the correct\n * information. In these cases, because you now have cheap access to a diff of the relationship\n * state, there are a few options that weren't available before:\n *\n * - you can adjust returned API payloads to contain the expected changes that it doesn't include\n * - you can modify local state by adding or removing records on the HasMany record array to remove\n *   any local changes that were not returned by the API.\n * - you can use `<Cache>.mutate(mutation)` to directly modify the local cache state of the relationship\n *   to match the expected state.\n *\n * What this version (5.3) does not yet provide is a way to directly modify the cache's remote state\n * for the relationship via public APIs other than via the broader action of upserting a response via\n * `<Cache>.put(document)`. However, such an API was sketched in the Cache 2.1 RFC\n * `<Cache>.patch(operation)` and is likely to be added in a future 5.x release of EmberData.\n *\n * This version (5.3) also does not yet provide a way to directly modify the graph (a general purpose\n * subset of cache behaviors specific to relationships) via public APIs. However, during the\n * 5.x release series we will be working on finalizing the Graph API and making it public.\n *\n * If none of these options work for you, you can always opt-out more broadly by implementing\n * a custom Cache with the relationship behaviors you need.\n *\n * @property DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE = '5.3';\n\n/**\n * **id: ember-data:deprecate-many-array-duplicates**\n *\n * When the flag is `true` (default), adding duplicate records to a `ManyArray`\n * is deprecated in non-production environments. In production environments,\n * duplicate records added to a `ManyArray` will be deduped and no error will\n * be thrown.\n *\n * When the flag is `false`, an error will be thrown when duplicates are added.\n *\n * @property DEPRECATE_MANY_ARRAY_DUPLICATES\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_MANY_ARRAY_DUPLICATES = '5.3';\n\n/**\n * **id: ember-data:deprecate-store-extends-ember-object**\n *\n * When the flag is `true` (default), the Store class will extend from `@ember/object`.\n * When the flag is `false` or `ember-source` is not present, the Store will not extend\n * from EmberObject.\n *\n * @property DEPRECATE_STORE_EXTENDS_EMBER_OBJECT\n * @since 5.4\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_STORE_EXTENDS_EMBER_OBJECT = '5.4';\n\n/**\n * **id: ember-data:schema-service-updates**\n *\n * When the flag is `true` (default), the legacy schema\n * service features will be enabled on the store and\n * the service, and deprecations will be thrown when\n * they are used.\n *\n * Deprecated features include:\n *\n * - `Store.registerSchema` method is deprecated in favor of the `Store.createSchemaService` hook\n * - `Store.registerSchemaDefinitionService` method is deprecated in favor of the `Store.createSchemaService` hook\n * - `Store.getSchemaDefinitionService` method is deprecated in favor of `Store.schema` property\n * - `SchemaService.doesTypeExist` method is deprecated in favor of the `SchemaService.hasResource` method\n * - `SchemaService.attributesDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method\n * - `SchemaService.relationshipsDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method\n *\n * @property ENABLE_LEGACY_SCHEMA_SERVICE\n * @since 5.4\n * @until 6.0\n * @public\n */\nexport const ENABLE_LEGACY_SCHEMA_SERVICE = '5.4';\n\n/**\n * **id: warp-drive.ember-inflector**\n *\n * Deprecates the use of ember-inflector for pluralization and singularization in favor\n * of the `@ember-data/request-utils` package.\n *\n * Rule configuration methods (singular, plural, uncountable, irregular) and\n * usage methods (singularize, pluralize) are are available as imports from\n * `@ember-data/request-utils/string`\n *\n * Notable differences with ember-inflector:\n * - there cannot be multiple inflector instances with separate rules\n * - pluralization does not support a count argument\n * - string caches now default to 10k entries instead of 1k, and this\n *   size is now configurable. Additionally, the cache is now a LRU cache\n *   instead of a first-N cache.\n *\n * This deprecation can be resolved by removing usage of ember-inflector or by using\n * both ember-inflector and @ember-data/request-utils in parallel and updating your\n * EmberData/WarpDrive build config to mark the deprecation as resolved\n * in ember-cli-build\n *\n * ```js\n * setConfig(app, __dirname, { deprecations: { DEPRECATE_EMBER_INFLECTOR: false }});\n * ```\n *\n * @property DEPRECATE_EMBER_INFLECTOR\n * @since 5.3\n * @until 6.0\n * @public\n */\nexport const DEPRECATE_EMBER_INFLECTOR = '5.3';\n\n/**\n * This is a special flag that can be used to opt-in early to receiving deprecations introduced in 6.x\n * which have had their infra backported to 5.x versions of EmberData.\n *\n * When this flag is not present or set to `true`, the deprecations from the 6.x branch\n * will not print their messages and the deprecation cannot be resolved.\n *\n * When this flag is present and set to `false`, the deprecations from the 6.x branch will\n * print and can be resolved.\n *\n * @property DISABLE_7X_DEPRECATIONS\n * @since 5.3\n * @until 7.0\n * @public\n */\nexport const DISABLE_7X_DEPRECATIONS = '7.0';\n","import semver from 'semver';\n\nimport * as CURRENT_DEPRECATIONS from '../../deprecation-versions.ts';\ntype MajorMinor = `${number}.${number}`;\ntype DeprecationFlag = keyof typeof CURRENT_DEPRECATIONS;\n\nfunction deprecationIsResolved(deprecatedSince: MajorMinor, compatVersion: MajorMinor) {\n  return semver.lte(semver.minVersion(deprecatedSince)!, semver.minVersion(compatVersion)!);\n}\n\nconst NextMajorVersion = '6.';\n\nfunction deprecationIsNextMajorCycle(deprecatedSince: MajorMinor) {\n  return deprecatedSince.startsWith(NextMajorVersion);\n}\n\nexport function getDeprecations(\n  compatVersion: MajorMinor | null | undefined,\n  deprecations?: { [key in DeprecationFlag]?: boolean }\n): { [key in DeprecationFlag]: boolean } {\n  const flags = {} as Record<DeprecationFlag, boolean>;\n  const keys = Object.keys(CURRENT_DEPRECATIONS) as DeprecationFlag[];\n  const DISABLE_7X_DEPRECATIONS = deprecations?.DISABLE_7X_DEPRECATIONS ?? true;\n\n  keys.forEach((flag) => {\n    const deprecatedSince = CURRENT_DEPRECATIONS[flag];\n    const isDeactivatedDeprecationNotice = DISABLE_7X_DEPRECATIONS && deprecationIsNextMajorCycle(deprecatedSince);\n    let flagState = true; // default to no code-stripping\n\n    if (!isDeactivatedDeprecationNotice) {\n      // if we have a specific flag setting, use it\n      if (typeof deprecations?.[flag] === 'boolean') {\n        flagState = deprecations?.[flag]!;\n      } else if (compatVersion) {\n        // if we are told we are compatible with a version\n        // we check if we can strip this flag\n        const isResolved = deprecationIsResolved(deprecatedSince, compatVersion);\n        // if we've resolved, we strip (by setting the flag to false)\n        /*\n        if (DEPRECATED_FEATURE) {\n          // deprecated code path\n        } else {\n          // if needed a non-deprecated code path\n        }\n      */\n        flagState = !isResolved;\n      }\n    }\n\n    // console.log(`${flag}=${flagState} (${deprecatedSince} <= ${compatVersion})`);\n    flags[flag] = flagState;\n  });\n\n  return flags;\n}\n","/**\n *\n * @module @warp-drive/build-config\n */\n\n/**\n *\n * ## Canary Features\n *\n * EmberData allows users to test features that are implemented but not yet\n * available even in canary.\n *\n * Typically these features represent work that might introduce a new concept,\n * new API, change an API, or risk an unintended change in behavior to consuming\n * applications.\n *\n * Such features have their implementations guarded by a \"feature flag\", and the\n * flag is only activated once the core-data team is prepared to ship the work\n * in a canary release.\n *\n * ### Installing Canary\n *\n * To test a feature you MUST be using a canary build. Canary builds are published\n * to `npm` and can be installed using a precise tag (such as `ember-data@3.16.0-alpha.1`)\n * or by installing the latest dist-tag published to the `canary` channel using your javascript\n * package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n  ```cli\n  pnpm add ember-data@canary\n  ```\n *\n * ### Activating a Canary Feature\n *\n * Once you have installed canary, feature-flags can be activated at build-time\n *\n * by setting an environment variable:\n *\n * ```cli\n * # Activate a single flag\n * WARP_DRIVE_FEATURE_OVERRIDE=SOME_FLAG ember build\n *\n * # Activate multiple flags by separating with commas\n * WARP_DRIVE_FEATURE_OVERRIDE=SOME_FLAG,OTHER_FLAG ember build\n *\n * # Activate all flags\n * WARP_DRIVE_FEATURE_OVERRIDE=ENABLE_ALL_OPTIONAL ember build\n * ```\n *\n * or by setting the appropriate flag in your `ember-cli-build` file:\n *\n * ```ts\n * setConfig(app, __dirname, {\n *   features: {\n *     SAMPLE_FEATURE_FLAG: false // utliize existing behavior, strip code for the new feature\n *     OTHER_FEATURE_FLAG: true // utilize this new feature, strip code for the older behavior\n *   }\n * })\n * ```\n *\n * **The \"off\" branch of feature-flagged code is always stripped from production builds.**\n *\n * The list of available feature-flags is located [here](https://github.com/emberjs/data/tree/main/packages/build-config/src/virtual/canary-features.ts \"List of EmberData FeatureFlags\")\n *\n *\n * ### Preparing a Project to use a Canary Feature\n *\n * For most projects, simple version detection should be enough.\n * Using the provided version compatibility helpers from [embroider-macros](https://github.com/embroider-build/embroider/tree/main/packages/macros#readme)\n * the following can be done:\n *\n * ```js\n * if (macroCondition(dependencySatisfies('@ember-data/store', '5.0'))) {\n *   // do thing\n * }\n * ```\n *\n * The current list of features used at build time for canary releases is defined below.\n * If empty there are no features currently gated by feature flags.\n *\n * The valid values are:\n *\n *  - `true` | The feature is **enabled** at all times, and cannot be disabled.\n *  - `false` | The feature is **disabled** at all times, and cannot be enabled.\n *  - `null` | The feature is **disabled by default**, but can be enabled via configuration.\n *\n * @class CanaryFeatures\n * @public\n*/\nexport const SAMPLE_FEATURE_FLAG: boolean | null = null;\n\n/**\n * This upcoming feature adds a validation step to payloads received\n * by the JSONAPICache implementation.\n *\n * When a request completes and the result is given to the cache via\n * `cache.put`, the cache will validate the payload against registered\n * schemas as well as the JSON:API spec.\n *\n * @property JSON_API_CACHE_VALIDATION_ERRORS\n * @since 5.4\n * @public\n */\nexport const JSON_API_CACHE_VALIDATION_ERRORS: boolean | null = false;\n","import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nimport * as CURRENT_FEATURES from '../../canary-features.ts';\ntype FEATURE = keyof typeof CURRENT_FEATURES;\n\nconst dirname = typeof __dirname !== 'undefined' ? __dirname : fileURLToPath(new URL('.', import.meta.url));\nconst relativePkgPath = path.join(dirname, '../package.json');\n\nconst version = JSON.parse(fs.readFileSync(relativePkgPath, 'utf-8')).version;\nconst isCanary = version.includes('alpha');\n\nexport function getFeatures(isProd: boolean): { [key in FEATURE]: boolean } {\n  const features = Object.assign({}, CURRENT_FEATURES) as Record<FEATURE, boolean>;\n  const keys = Object.keys(features) as FEATURE[];\n\n  if (!isCanary) {\n    // disable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = false;\n      }\n    }\n    return features;\n  }\n\n  const FEATURE_OVERRIDES = process.env.WARP_DRIVE_FEATURE_OVERRIDE;\n  if (FEATURE_OVERRIDES === 'ENABLE_ALL_OPTIONAL') {\n    // enable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = true;\n      }\n    }\n  } else if (FEATURE_OVERRIDES === 'DISABLE_ALL') {\n    // disable all features, including those with a value of `true`\n    for (const feature of keys) {\n      features[feature] = false;\n    }\n  } else if (FEATURE_OVERRIDES) {\n    // enable only the specific features listed in the environment\n    // variable (comma separated)\n    const forcedFeatures = FEATURE_OVERRIDES.split(',');\n    for (let i = 0; i < forcedFeatures.length; i++) {\n      let featureName = forcedFeatures[i];\n\n      if (!keys.includes(featureName as FEATURE)) {\n        throw new Error(`Unknown feature flag: ${featureName}`);\n      }\n\n      features[featureName as FEATURE] = true;\n    }\n  }\n\n  if (isProd) {\n    // disable all features with a current value of `null`\n    for (const feature of keys) {\n      let featureValue = features[feature];\n\n      if (featureValue === null) {\n        features[feature] = false;\n      }\n    }\n  }\n\n  return features;\n}\n","/**\n  @module @warp-drive/build-config\n */\n/**\n * ## Debug Logging\n *\n * Many portions of the internals are helpfully instrumented with logging that can be activated\n * at build time. This instrumentation is always removed from production builds or any builds\n * that has not explicitly activated it. To activate it set the appropriate flag to `true`.\n *\n * ```ts\n * setConfig(__dirname, app, {\n *   debug: {\n *     LOG_CACHE: false, // data store received to update cache with\n *     LOG_NOTIFICATIONS: false,\n *     LOG_REQUESTS: false,\n *     LOG_REQUEST_STATUS: false,\n *     LOG_IDENTIFIERS: false,\n *     LOG_GRAPH: false,\n *     LOG_INSTANCE_CACHE: false,\n *     LOG_METRIC_COUNTS: false,\n *     DEBUG_RELATIONSHIP_NOTIFICATIONS: false,\n *   }\n * });\n * ```\n *\n * @class DebugLogging\n * @public\n */\n/**\n * log cache updates for both local\n * and remote state.\n *\n * @property {boolean} LOG_CACHE\n * @public\n */\nexport const LOG_CACHE: boolean = false;\n\n/**\n * log notifications received by the NotificationManager\n *\n * @property {boolean} LOG_NOTIFICATIONS\n * @public\n */\nexport const LOG_NOTIFICATIONS: boolean = false;\n/**\n * log requests issued by the RequestManager\n *\n * @property {boolean} LOG_REQUESTS\n * @public\n */\nexport const LOG_REQUESTS: boolean = false;\n/**\n * log updates to requests the store has issued to\n * the network (adapter) to fulfill.\n *\n * @property {boolean} LOG_REQUEST_STATUS\n * @public\n */\nexport const LOG_REQUEST_STATUS: boolean = false;\n/**\n * log peek, generation and updates to\n * Record Identifiers.\n *\n * @property {boolean} LOG_IDENTIFIERS\n * @public\n */\nexport const LOG_IDENTIFIERS: boolean = false;\n/**\n * log updates received by the graph (relationship pointer storage)\n *\n * @property {boolean} LOG_GRAPH\n * @public\n */\nexport const LOG_GRAPH: boolean = false;\n/**\n * log creation/removal of RecordData and Record\n * instances.\n *\n * @property {boolean} LOG_INSTANCE_CACHE\n * @public\n */\nexport const LOG_INSTANCE_CACHE: boolean = false;\n/**\n * Log key count metrics, useful for performance\n * debugging.\n *\n * @property {boolean} LOG_METRIC_COUNTS\n * @public\n */\nexport const LOG_METRIC_COUNTS: boolean = false;\n/**\n * Helps when debugging causes of a change notification\n * when processing an update to a hasMany relationship.\n *\n * @property {boolean} DEBUG_RELATIONSHIP_NOTIFICATIONS\n * @public\n */\nexport const DEBUG_RELATIONSHIP_NOTIFICATIONS: boolean = false;\n\n/**\n * A private flag to enable logging of the native Map/Set\n * constructor and method calls.\n *\n * EXTREMELY MALPERFORMANT\n *\n * LOG_METRIC_COUNTS must also be enabled.\n *\n * @typedoc\n */\nexport const __INTERNAL_LOG_NATIVE_MAP_SET_COUNTS: boolean = false;\n","import * as LOGGING from '../../debugging.ts';\n\ntype LOG_CONFIG_KEY = keyof typeof LOGGING;\nexport type LOG_CONFIG = { [key in LOG_CONFIG_KEY]: boolean };\n\nexport function createLoggingConfig(\n  env: { DEBUG: boolean; TESTING: boolean; PRODUCTION: boolean },\n  debug: LOG_CONFIG\n): LOG_CONFIG {\n  const config = {} as LOG_CONFIG;\n  const keys = Object.keys(LOGGING) as LOG_CONFIG_KEY[];\n\n  for (const key of keys) {\n    if (env.DEBUG || env.TESTING) {\n      config[key] = true;\n    } else {\n      config[key] = debug[key] || false;\n    }\n  }\n\n  return config;\n}\n","/**\n * Settings configuration for deprecations, optional features, development/testing\n * support and debug logging is done using `setConfig` in `ember-cli-build`.\n *\n * ```ts\n * 'use strict';\n *\n * const EmberApp = require('ember-cli/lib/broccoli/ember-app');\n *\n * module.exports = async function (defaults) {\n *   const { setConfig } = await import('@warp-drive/build-config');\n *\n *   const app = new EmberApp(defaults, {});\n *\n *   setConfig(app, __dirname, {\n *     // settings here\n *   });\n *\n *   const { Webpack } = require('@embroider/webpack');\n *   return require('@embroider/compat').compatBuild(app, Webpack, {});\n * };\n *\n * ```\n *\n * Available settings include:\n *\n * - [Debug Logging](../classes/DebugLogging)\n * - [Deprecated Code Removal](../classes/CurrentDeprecations)\n * - [Canary Feature Activation](../classes/CanaryFeatures)\n *\n * As well as:\n *\n * ### polyfillUUID\n *\n * If you are using the library in an environment that does not support `window.crypto.randomUUID`\n * you can enable a polyfill for it.\n *\n * ```ts\n * setConfig(app, __dirname, {\n *  polyfillUUID: true\n * });\n * ```\n *\n * ### includeDataAdapterInProduction\n *\n * By default, the integration required to support the ember inspector browser extension\n * is included in production builds only when using the `ember-data` package. Otherwise\n * the default is to exclude it. This setting allows to explicitly enable/disable it in\n * production builds.\n *\n * ```ts\n * setConfig(app, __dirname, {\n *   includeDataAdapterInProduction: true\n * });\n * ```\n *\n * @module @warp-drive/build-config\n * @main @warp-drive/build-config\n */\nimport EmbroiderMacros from '@embroider/macros/src/node.js';\nimport { getEnv } from './-private/utils/get-env.ts';\nimport { getDeprecations } from './-private/utils/deprecations.ts';\nimport { getFeatures } from './-private/utils/features.ts';\nimport * as LOGGING from './debugging.ts';\nimport type { MacrosConfig } from '@embroider/macros/src/node.js';\nimport { createLoggingConfig } from './-private/utils/logging.ts';\n\nconst _MacrosConfig = EmbroiderMacros.MacrosConfig as unknown as typeof MacrosConfig;\n\ntype LOG_CONFIG_KEY = keyof typeof LOGGING;\n\nexport type WarpDriveConfig = {\n  debug?: Partial<InternalWarpDriveConfig['debug']>;\n  polyfillUUID?: boolean;\n  includeDataAdapterInProduction?: boolean;\n  compatWith?: `${number}.${number}`;\n  deprecations?: Partial<InternalWarpDriveConfig['deprecations']>;\n  features?: Partial<InternalWarpDriveConfig['features']>;\n};\n\ntype InternalWarpDriveConfig = {\n  debug: { [key in LOG_CONFIG_KEY]: boolean };\n  polyfillUUID: boolean;\n  includeDataAdapter: boolean;\n  compatWith: `${number}.${number}` | null;\n  deprecations: ReturnType<typeof getDeprecations>;\n  features: ReturnType<typeof getFeatures>;\n  activeLogging: { [key in LOG_CONFIG_KEY]: boolean };\n  env: {\n    TESTING: boolean;\n    PRODUCTION: boolean;\n    DEBUG: boolean;\n  };\n};\n\ntype MacrosWithGlobalConfig = Omit<MacrosConfig, 'globalConfig'> & { globalConfig: Record<string, unknown> };\n\nfunction recastMacrosConfig(macros: object): MacrosWithGlobalConfig {\n  if (!('globalConfig' in macros)) {\n    throw new Error('Expected MacrosConfig to have a globalConfig property');\n  }\n  return macros as MacrosWithGlobalConfig;\n}\n\nexport function setConfig(macros: object, config: WarpDriveConfig): void;\nexport function setConfig(context: object, appRoot: string, config: WarpDriveConfig): void;\nexport function setConfig(context: object, appRootOrConfig: string | WarpDriveConfig, config?: WarpDriveConfig): void {\n  const isEmberClassicUsage = arguments.length === 3;\n  const macros = recastMacrosConfig(\n    isEmberClassicUsage ? _MacrosConfig.for(context, appRootOrConfig as string) : context\n  );\n\n  const userConfig = isEmberClassicUsage ? config! : (appRootOrConfig as WarpDriveConfig);\n\n  const isLegacySupport = (userConfig as unknown as { ___legacy_support?: boolean }).___legacy_support;\n  const hasDeprecatedConfig = isLegacySupport && Object.keys(userConfig).length > 1;\n  const hasInitiatedConfig = macros.globalConfig['WarpDrive'];\n\n  // setConfig called by user prior to legacy support called\n  if (isLegacySupport && hasInitiatedConfig) {\n    if (hasDeprecatedConfig) {\n      throw new Error(\n        'You have provided a config object to setConfig, but are also using the legacy emberData options key in ember-cli-build. Please remove the emberData key from options.'\n      );\n    }\n    return;\n  }\n\n  // legacy support called prior to user setConfig\n  if (isLegacySupport && hasDeprecatedConfig) {\n    // We don't want to print this just yet because we are going to re-arrange packages\n    // and this would be come an import from @warp-drive/core. Better to not deprecate twice.\n    // console.warn(\n    //   `You are using the legacy emberData key in your ember-cli-build.js file. This key is deprecated and will be removed in the next major version of EmberData/WarpDrive. Please use \\`import { setConfig } from '@warp-drive/build-config';\\` instead.`\n    // );\n  }\n\n  // included hooks run during class initialization of the EmberApp instance\n  // so our hook will run before the user has a chance to call setConfig\n  // else we could print a useful message here\n  // else if (isLegacySupport) {\n  //   console.warn(\n  //     `WarpDrive requires your ember-cli-build file to set a base configuration for the project.\\n\\nUsage:\\n\\t\\`import { setConfig } from '@warp-drive/build-config';\\n\\tsetConfig(app, __dirname, {});\\``\n  //   );\n  // }\n\n  const debugOptions: InternalWarpDriveConfig['debug'] = Object.assign({}, LOGGING, userConfig.debug);\n\n  const env = getEnv();\n  const DEPRECATIONS = getDeprecations(userConfig.compatWith || null, userConfig.deprecations);\n  const FEATURES = getFeatures(env.PRODUCTION);\n\n  const includeDataAdapterInProduction =\n    typeof userConfig.includeDataAdapterInProduction === 'boolean' ? userConfig.includeDataAdapterInProduction : true;\n  const includeDataAdapter = env.PRODUCTION ? includeDataAdapterInProduction : true;\n\n  const finalizedConfig: InternalWarpDriveConfig = {\n    debug: debugOptions,\n    polyfillUUID: userConfig.polyfillUUID ?? false,\n    includeDataAdapter,\n    compatWith: userConfig.compatWith ?? null,\n    deprecations: DEPRECATIONS,\n    features: FEATURES,\n    activeLogging: createLoggingConfig(env, debugOptions),\n    env,\n  };\n\n  macros.setGlobalConfig(import.meta.filename, 'WarpDrive', finalizedConfig);\n}\n"],"names":["getEnv","EMBER_ENV","IS_TESTING","EMBER_CLI_TEST_COMMAND","NODE_ENV","CI","IS_RECORDING","process","env","PRODUCTION","DEBUG","TESTING","Boolean","SHOULD_RECORD","IS_CI","DEPRECATE_CATCH_ALL","DEPRECATE_NON_STRICT_TYPES","DEPRECATE_NON_STRICT_ID","DEPRECATE_COMPUTED_CHAINS","DEPRECATE_LEGACY_IMPORTS","DEPRECATE_NON_UNIQUE_PAYLOADS","DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE","DEPRECATE_MANY_ARRAY_DUPLICATES","DEPRECATE_STORE_EXTENDS_EMBER_OBJECT","ENABLE_LEGACY_SCHEMA_SERVICE","DEPRECATE_EMBER_INFLECTOR","DISABLE_7X_DEPRECATIONS","deprecationIsResolved","deprecatedSince","compatVersion","semver","lte","minVersion","NextMajorVersion","deprecationIsNextMajorCycle","startsWith","getDeprecations","deprecations","flags","keys","Object","CURRENT_DEPRECATIONS","forEach","flag","isDeactivatedDeprecationNotice","flagState","isResolved","SAMPLE_FEATURE_FLAG","JSON_API_CACHE_VALIDATION_ERRORS","dirname","__dirname","fileURLToPath","relativePkgPath","path","join","version","JSON","parse","fs","readFileSync","isCanary","includes","getFeatures","isProd","features","assign","CURRENT_FEATURES","feature","featureValue","FEATURE_OVERRIDES","WARP_DRIVE_FEATURE_OVERRIDE","forcedFeatures","split","i","length","featureName","Error","LOG_CACHE","LOG_NOTIFICATIONS","LOG_REQUESTS","LOG_REQUEST_STATUS","LOG_IDENTIFIERS","LOG_GRAPH","LOG_INSTANCE_CACHE","LOG_METRIC_COUNTS","DEBUG_RELATIONSHIP_NOTIFICATIONS","__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS","createLoggingConfig","debug","config","LOGGING","key","_MacrosConfig","EmbroiderMacros","MacrosConfig","recastMacrosConfig","macros","setConfig","context","appRootOrConfig","isEmberClassicUsage","arguments","for","userConfig","isLegacySupport","___legacy_support","hasDeprecatedConfig","hasInitiatedConfig","globalConfig","debugOptions","DEPRECATIONS","compatWith","FEATURES","includeDataAdapterInProduction","includeDataAdapter","finalizedConfig","polyfillUUID","activeLogging","setGlobalConfig","import"],"mappings":";;;;;;;;;;;AAAO,SAASA,MAAMA,GAOpB;EACA,MAAM;IAAEC,SAAS;IAAEC,UAAU;IAAEC,sBAAsB;IAAEC,QAAQ;IAAEC,EAAE;AAAEC,IAAAA;GAAc,GAAGC,OAAO,CAACC,GAAG;EACjG,MAAMC,UAAU,GAAGR,SAAS,KAAK,YAAY,IAAK,CAACA,SAAS,IAAIG,QAAQ,KAAK,YAAa;EAC1F,MAAMM,KAAK,GAAG,CAACD,UAAU;AACzB,EAAA,MAAME,OAAO,GAAGD,KAAK,IAAIE,OAAO,CAACX,SAAS,KAAK,MAAM,IAAIC,UAAU,IAAIC,sBAAsB,CAAC;EAC9F,MAAMU,aAAa,GAAGD,OAAO,CAAC,CAACP,EAAE,IAAIC,YAAY,CAAC;EAElD,OAAO;IACLK,OAAO;IACPF,UAAU;IACVC,KAAK;AACLJ,IAAAA,YAAY,EAAEM,OAAO,CAACN,YAAY,CAAC;AACnCQ,IAAAA,KAAK,EAAEF,OAAO,CAACP,EAAE,CAAC;AAClBQ,IAAAA;GACD;AACH;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAME,mBAAmB,GAAG,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,0BAA0B,GAAG,KAAK;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,uBAAuB,GAAG,KAAK;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,yBAAyB,GAAG,KAAK;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,wBAAwB,GAAG,KAAK;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,6BAA6B,GAAG,KAAK;;AAElyDAAyD,GAAG,KAAK;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,+BAA+B,GAAG,KAAK;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,oCAAoC,GAAG,KAAK;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,4BAA4B,GAAG,KAAK;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,yBAAyB,GAAG,KAAK;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,uBAAuB,GAAG,KAAK;;;;;;;;;;;;;;;;;;AC9b5C,SAASC,qBAAqBA,CAACC,eAA2B,EAAEC,aAAyB,EAA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMa,SAAkB,GAAG,KAAK;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAA0B,GAAG,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,YAAqB,GAAG,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAA2B,GAAG,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,eAAwB,GAAG,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,SAAkB,GAAG,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAA2B,GAAG,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAA0B,GAAG,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,gCAAyC,GAAG,KAAK;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,oCAA6C,GAAG,KAAK;;;;;;;;;;;;;;;;ACzG3D,SAASC,mBAAmBA,CACjC/E,GAA8D,EAC9DgF,KAAiB,EACL;EACZ,MAAMC,MAAM,GAAG,EAAgB;AAC/B,EAAA,MAAMlD,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACmD,OAAO,CAAqB;AAErD,EAAA,KAAK,MAAMC,GAAG,IAAIpD,IAAI,EAAE;AACtB,IAAA,IAAI/B,GAAG,CAACE,KAAK,IAAIF,GAAG,CAACG,OAAO,EAAE;AAC5B8E,MAAAA,MAAM,CAACE,GAAG,CAAC,GAAG,IAAI;AACpB,KAAC,MAAM;MACLF,MAAM,CAACE,GAAG,CAAC,GAAGH,KAAK,CAACG,GAAG,CAAC,IAAI,KAAK;AACnC;AACF;AAEA,EAAA,OAAOF,MAAM;AACf;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,MAAMG,aAAa,GAAGC,eAAe,CAACC,YAA8C;AA8BpF,SAASC,kBAAkBA,CAACC,MAAc,EAA0B;AAClE,EAAA,IAAI,EAAE,cAAc,IAAIA,MAAM,CAAC,EAAE;AAC/B,IAAA,MAAM,IAAIpB,KAAK,CAAC,uDAAuD,CAAC;AAC1E;AACA,EAAA,OAAOoB,MAAM;AACf;AAIO,SAASC,SAASA,CAACC,OAAe,EAAEC,eAAyC,EAAEV,MAAwB,EAAQ;AACpH,EAAA,MAAMW,mBAAmB,GAAGC,SAAS,CAAC3B,MAAM,KAAK,CAAC;AAClD,EAAA,MAAMsB,MAAM,GAAGD,kBAAkB,CAC/BK,mBAAmB,GAAGR,aAAa,CAACU,GAAG,CAACJ,OAAO,EAAEC,eAAyB,CAAC,GAAGD,OAChF,CAAC;AAED,EAAA,MAAMK,UAAU,GAAGH,mBAAmB,GAAGX,MAAM,GAAKU,eAAmC;AAEvF,EAAA,MAAMK,eAAe,GAAID,UAAU,CAAgDE,iBAAiB;AACpG,EAAA,MAAMC,mBAAmB,GAAGF,eAAe,IAAIhE,MAAM,CAACD,IAAI,CAACgE,UAAU,CAAC,CAAC7B,MAAM,GAAG,CAAC;AACjF,EAAA,MAAMiC,kBAAkB,GAAGX,MAAM,CAACY,YAAY,CAAC,WAAW,CAAC;;AAE3D;EACA,IAAIJ,eAAe,IAAIG,kBAAkB,EAAE;AACzC,IAAA,IAAID,mBAAmB,EAAE;AACvB,MAAA,MAAM,IAAI9B,KAAK,CACb,uKACF,CAAC;AACH;AACA,IAAA;AACF;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAA,MAAMiC,YAA8C,GAAGrE,MAAM,CAACyB,MAAM,CAAC,EAAE,EAAEyB,OAAO,EAAEa,UAAU,CAACf,KAAK,CAAC;AAEnG,EAAA,MAAMhF,GAAG,GAAGR,MAAM,EAAE;AACpB,EAAA,MAAM8G,YAAY,GAAG1E,eAAe,CAACmE,UAAU,CAACQ,UAAU,IAAI,IAAI,EAAER,UAAU,CAAClE,YAAY,CAAC;AAC5F,EAAA,MAAM2E,QAAQ,GAAGlD,WAAW,CAACtD,GAAG,CAACC,UAAU,CAAC;AAE5C,EAAA,MAAMwG,8BAA8B,GAClC,OAAOV,UAAU,CAACU,8BAA8B,KAAK,SAAS,GAAGV,UAAU,CAACU,8BAA8B,GAAG,IAAI;EACnH,MAAMC,kBAAkB,GAAG1G,GAAG,CAACC,UAAU,GAAGwG,8BAA8B,GAAG,IAAI;AAEjF,EAAA,MAAME,eAAwC,GAAG;AAC/C3B,IAAAA,KAAK,EAAEqB,YAAY;AACnBO,IAAAA,YAAY,EAAEb,UAAU,CAACa,YAAY,IAAI,KAAK;IAC9CF,kBAAkB;AAClBH,IAAAA,UAAU,EAAER,UAAU,CAACQ,UAAU,IAAI,IAAI;AACzC1E,IAAAA,YAAY,EAAEyE,YAAY;AAC1B9C,IAAAA,QAAQ,EAAEgD,QAAQ;AAClBK,IAAAA,aAAa,EAAE9B,mBAAmB,CAAC/E,GAAG,EAAEqG,YAAY,CAAC;AACrDrG,IAAAA;GACD;AAEDwF,EAAAA,MAAM,CAACsB,eAAe,CAACC,SAAoB,EAAE,WAAW,EAAEJ,eAAe,CAAC;AAC5E;;;;"}