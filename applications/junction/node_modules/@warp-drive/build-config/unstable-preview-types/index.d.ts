/// <reference path="./deprecations.d.ts" />
/// <reference path="./debugging.d.ts" />
/// <reference path="./cjs-set-config.d.ts" />
/// <reference path="./deprecation-versions.d.ts" />
/// <reference path="./babel-macros.d.ts" />
/// <reference path="./validate-exports.type-test.d.ts" />
/// <reference path="./macros.d.ts" />
/// <reference path="./canary-features.d.ts" />
/// <reference path="./env.d.ts" />
/// <reference path="./-private/utils/deprecations.d.ts" />
/// <reference path="./-private/utils/get-env.d.ts" />
/// <reference path="./-private/utils/logging.d.ts" />
/// <reference path="./-private/utils/features.d.ts" />
declare module '@warp-drive/build-config' {
  import { getDeprecations } from '@warp-drive/build-config/-private/utils/deprecations.ts';
  import { getFeatures } from '@warp-drive/build-config/-private/utils/features.ts';
  import * as LOGGING from '@warp-drive/build-config/debugging.ts';
  type LOG_CONFIG_KEY = keyof typeof LOGGING;
  export type WarpDriveConfig = {
      debug?: Partial<InternalWarpDriveConfig['debug']>;
      polyfillUUID?: boolean;
      includeDataAdapterInProduction?: boolean;
      compatWith?: `${number}.${number}`;
      deprecations?: Partial<InternalWarpDriveConfig['deprecations']>;
      features?: Partial<InternalWarpDriveConfig['features']>;
  };
  type InternalWarpDriveConfig = {
      debug: {
          [key in LOG_CONFIG_KEY]: boolean;
      };
      polyfillUUID: boolean;
      includeDataAdapter: boolean;
      compatWith: `${number}.${number}` | null;
      deprecations: ReturnType<typeof getDeprecations>;
      features: ReturnType<typeof getFeatures>;
      activeLogging: {
          [key in LOG_CONFIG_KEY]: boolean;
      };
      env: {
          TESTING: boolean;
          PRODUCTION: boolean;
          DEBUG: boolean;
      };
  };
  export function setConfig(macros: object, config: WarpDriveConfig): void;
  export function setConfig(context: object, appRoot: string, config: WarpDriveConfig): void;
  export {};
}
//# sourceMappingURL=index.d.ts.map