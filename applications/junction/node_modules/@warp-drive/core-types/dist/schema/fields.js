/**
 * @module @warp-drive/core-types
 */

/**
 * A generic "field" that can be used to define
 * primitive value fields.
 *
 * Replaces "attribute" for primitive value fields.
 * Can also be used to eject from deep-tracking of
 * objects or arrays.
 *
 * A major difference between "field" and "attribute"
 * is that "type" points to a legacy transform on
 * "attribute" that a serializer *might* use, while
 * "type" points to a new-style transform on "field"
 * that a record implmentation *must* use.
 *
 * @class <Type> GenericField
 * @public
 */

/**
 * A field that can be used to alias one key to another
 * key present in the cache version of the resource.
 *
 * Unlike DerivedField, an AliasField may write to its
 * source when a record is in an editable mode.
 *
 * AliasFields may utilize a transform, specified by type,
 * to pre/post process the field.
 *
 * An AliasField may also specify a `kind` via options.
 * `kind` may be any other valid field kind other than
 *
 * - `@hash`
 * - `@id`
 * - `@local`
 * - `derived`
 *
 * This allows an AliasField to rename any field in the cache.
 *
 * Alias fields are generally intended to be used to support migrating
 * between different schemas, though there are times where they are useful
 * as a form of advanced derivation when used with a transform. For instance,
 * an AliasField could be used to expose both a string and a Date version of the
 * same field, with both being capable of being written to.
 *
 * @class <Type> LegacyAliasField
 * @public
 */

/**
 * A field that can be used to alias one key to another
 * key present in the cache version of the resource.
 *
 * Unlike DerivedField, an AliasField may write to its
 * source when a record is in an editable mode.
 *
 * AliasFields may utilize a transform, specified by type,
 * to pre/post process the field.
 *
 * An AliasField may also specify a `kind` via options.
 * `kind` may be any other valid field kind other than
 *
 * - `@hash`
 * - `@id`
 * - `@local`
 * - `derived`
 *
 * This allows an AliasField to rename any field in the cache.
 *
 * Alias fields are generally intended to be used to support migrating
 * between different schemas, though there are times where they are useful
 * as a form of advanced derivation when used with a transform. For instance,
 * an AliasField could be used to expose both a string and a Date version of the
 * same field, with both being capable of being written to.
 *
 * @class <Type> PolarisAliasField
 * @public
 */

/**
 * A field that can be used to alias one key to another
 * key present in the cache version of the resource.
 *
 * Unlike DerivedField, an AliasField may write to its
 * source when a record is in an editable mode.
 *
 * AliasFields may utilize a transform, specified by type,
 * to pre/post process the field.
 *
 * An AliasField may also specify a `kind` via options.
 * `kind` may be any other valid field kind other than
 *
 * - `@hash`
 * - `@id`
 * - `@local`
 * - `derived`
 *
 * This allows an AliasField to rename any field in the cache.
 *
 * Alias fields are generally intended to be used to support migrating
 * between different schemas, though there are times where they are useful
 * as a form of advanced derivation when used with a transform. For instance,
 * an AliasField could be used to expose both a string and a Date version of the
 * same field, with both being capable of being written to.
 *
 * @class <Type> ObjectAliasField
 * @public
 */

/**
 * Represents a field whose value is the primary
 * key of the resource.
 *
 * This allows any field to serve as the primary
 * key while still being able to drive identity
 * needs within the system.
 *
 * This is useful for resources that use for instance
 * 'uuid', 'urn' or 'entityUrn' or 'primaryKey' as their
 * primary key field instead of 'id'.
 *
 * @class <Type> IdentityField
 * @public
 */

/**
 * Represents a specialized field whose computed value
 * will be used as the primary key of a schema-object
 * for serializability and comparison purposes.
 *
 * This field functions similarly to derived fields in that
 * it is non-settable, derived state but differs in that
 * it is only able to compute off of cache state and is given
 * no access to a record instance.
 *
 * This means that if a hashing function wants to compute its value
 * taking into account transformations and derivations it must
 * perform those itself.
 *
 * A schema-array can declare its "key" value to be `@hash` if
 * a schema-object has such a field.
 *
 * Only one hash field is permittable per schema-object, and
 * it should be placed in the `ResourceSchema`'s `@id` field
 * in place of an `IdentityField`.
 *
 * @class <Type> HashField
 * @public
 */

/**
 * Represents a field whose value is a local
 * value that is not stored in the cache, nor
 * is it sent to the server.
 *
 * Local fields can be written to, and their
 * value is both memoized and reactive (though
 * not deep-tracked).
 *
 * Because their state is not derived from the cache
 * data or the server, they represent a divorced
 * uncanonical source of state.
 *
 * For this reason Local fields should be used sparingly.
 *
 * Currently, while we document this feature here,
 * only allow our own SchemaRecord default fields to
 * utilize them and the feature should be considered private.
 *
 * Example use cases that drove the creation of local
 * fields are states like `isDestroying` and `isDestroyed`
 * which are specific to a record instance but not
 * stored in the cache. We wanted to be able to drive
 * these fields from schema the same as all other fields.
 *
 * Don't make us regret this decision.
 *
 * @class <Type> LocalField
 * @public
 */

/**
 * Represents a field whose value is an object
 * with keys pointing to values that are primitive
 * values.
 *
 * If values of the keys are not primitives, or
 * if the key/value pairs have well-defined shape,
 * use 'schema-object' instead.
 *
 * @class <Type> ObjectField
 * @public
 */

/**
 * Represents a field whose value is an object
 * with a well-defined structure described by
 * a non-resource schema.
 *
 * If the object's structure is not well-defined,
 * use 'object' instead.
 *
 * @class <Type> SchemaObjectField
 * @public
 */

/**
 * Represents a field whose value is an array
 * of primitive values.
 *
 * If the array's elements are not primitive
 * values, use 'schema-array' instead.
 *
 * @class <Type> ArrayField
 * @public
 */

/**
 * Represents a field whose value is an array
 * of objects with a well-defined structure
 * described by a non-resource schema.
 *
 * If the array's elements are not well-defined,
 * use 'array' instead.
 *
 * @class <Type> SchemaArrayField
 * @public
 */

/**
 * Represents a field whose value is derived
 * from other fields in the schema.
 *
 * The value is read-only, and is not stored
 * in the cache, nor is it sent to the server.
 *
 * Usage of derived fields should be minimized
 * to scenarios where the derivation is known
 * to be safe. For instance, derivations that
 * required fields that are not always loaded
 * or that require access to related resources
 * that may not be loaded should be avoided.
 *
 * @class <Type> DerivedField
 * @public
 */

/**
 * Represents a field that is a reference to
 * another resource.
 *
 * SUPPORT FOR THIS FEATURE IS NOT YET IMPLEMENTED
 * BY SchemaRecord
 *
 * @class <Type> ResourceField
 * @public
 */

/**
 * Represents a field that is a reference to
 * a collection of other resources, potentially
 * paginate.
 *
 * SUPPORT FOR THIS FEATURE IS NOT YET IMPLEMENTED
 * BY SchemaRecord
 *
 * @class <Type> CollectionField
 * @public
 */

/**
 * > [!CAUTION]
 * > This Field is LEGACY
 * > It cannot be used with PolarisMode
 *
 * A generic "field" that can be used to define
 * primitive value fields.
 *
 * If the field points to an object or array,
 * it will not be deep-tracked.
 *
 * Transforms when defined are legacy transforms
 * that a serializer *might* use, but their usage
 * is not guaranteed.
 *
 * @class <Type> LegacyAttributeField
 * @public
 */

/**
 * > [!CAUTION]
 * > This Field is LEGACY
 *
 * Represents a field that is a reference to
 * another resource.
 *
 * This is the legacy version of the `ResourceField`.
 *
 * @class <Type> LegacyBelongsToField
 * @public
 */

/**
 * > [!CAUTION]
 * > This Field is LEGACY
 *
 * Represents a field that is a reference to
 * another resource.
 *
 * This is the legacy version of the `ResourceField`.
 *
 * @class <Type> LinksModeBelongsToField
 * @public
 */

/**
 * > [!CAUTION]
 * > This Field is LEGACY
 *
 * Represents a field that is a reference to
 * a collection of other resources.
 *
 * This is the legacy version of the `CollectionField`.
 *
 * @class <Type> LegacyHasManyField
 * @public
 */

/**
 * > [!CAUTION]
 * > This Field is LEGACY
 *
 * Represents a field that is a reference to
 * a collection of other resources.
 *
 * This is the legacy version of the `CollectionField`.
 *
 * @class <Type> LinksModeHasManyField
 * @public
 */

/**
 * A union of all possible LegacyMode field schemas.
 *
 * Available field schemas are:
 *
 * - [GenericField](../classes/<Type>%20GenericField)
 * - [LegacyAliasField](../classes/<Type>%20LegacyAliasField)
 * - [LocalField](../classes/<Type>%20LocalField)
 * - [ObjectField](../classes/<Type>%20ObjectField)
 * - [SchemaObjectField](../classes/<Type>%20SchemaObjectField)
 * - [ArrayField](../classes/<Type>%20ArrayField)
 * - [SchemaArrayField](../classes/<Type>%20SchemaArrayField)
 * - [DerivedField](../classes/<Type>%20DerivedField)
 * - [ResourceField (not yet implemented)](../classes/<Type>%20ResourceField)
 * - [CollectionField (not yet implemented)](../classes/<Type>%20CollectionField)
 * - [LegacyAttributeField](../classes/<Type>%20LegacyAttributeField)
 * - [LegacyBelongsToField](../classes/<Type>%20LegacyBelongsToField)
 * - [LegacyHasManyField](../classes/<Type>%20LegacyHasManyField)
 *
 * @class <Type> LegacyModeFieldSchema
 * @public
 */

/**
 * A union of all possible PolarisMode field schemas.
 *
 * Available field schemas are:
 *
 * - [GenericField](../classes/<Type>%20GenericField)
 * - [PolarisAliasField](../classes/<Type>%20PolarisAliasField)
 * - [LocalField](../classes/<Type>%20LocalField)
 * - [ObjectField](../classes/<Type>%20ObjectField)
 * - [SchemaObjectField](../classes/<Type>%20SchemaObjectField)
 * - [ArrayField](../classes/<Type>%20ArrayField)
 * - [SchemaArrayField](../classes/<Type>%20SchemaArrayField)
 * - [DerivedField](../classes/<Type>%20DerivedField)
 * - [ResourceField (not yet implemented)](../classes/<Type>%20ResourceField)
 * - [CollectionField (not yet implemented)](../classes/<Type>%20CollectionField)
 * - [LinksModeBelongsToField](../classes/<Type>%20LinksModeBelongsToField)
 * - [LinksModeHasManyField](../classes/<Type>%20LinksModeHasManyField)
 *
 * @class <Type> PolarisModeFieldSchema
 * @public
 */

/**
 * A union of all possible LegacyMode and PolarisMode
 * field schemas.
 *
 * You likely will want to use PolarisModeFieldSchema,
 * LegacyModeFieldSchema, or ObjectFieldSchema instead
 * as appropriate as they are more specific and will
 * provide better guidance around what is valid.
 *
 * @class <Type> FieldSchema
 * @public
 */

/**
 * A union of all possible field schemas that can be
 * used in an ObjectSchema.
 *
 * @class <Type> ObjectFieldSchema
 * @public
 */

/**
 * Represents a schema for a primary resource in PolarisMode.
 *
 * Primary resources are objects with a unique identity of their
 * own which may allow them to appear in relationships, or in multiple
 * response documents.
 *
 * @class <Type> PolarisResourceSchema
 * @public
 */

/**
 * Represents a schema for a primary resource in LegacyMode
 *
 * Primary resources are objects with a unique identity of their
 * own which may allow them to appear in relationships, or in multiple
 * response documents.
 *
 * @class <Type> LegacyResourceSchema
 * @public
 */

/**
 * A type which represents a valid JSON schema
 * definition for either a PolarisMode or a
 * LegacyMode resource.
 *
 * Note, this is separate from the type returned
 * by the SchemaService which provides fields as a Map
 * instead of as an Array.
 *
 * @typedoc
 */

/**
 * Represents a schema for an object that is not
 * a primary resource (has no unique identity of its own).
 *
 * ObjectSchemas may not currently contain relationships.
 *
 * @class <Type> ObjectSchema
 * @public
 */

/**
 * A no-op type utility that enables type-checking resource schema
 * definitions.
 *
 * Will return the passed in schema.
 *
 * This will not validate relationship inverses or related types,
 * as doing so would require a full schema graph to be passed in
 * and no cycles in the graph to be present.
 *
 * @method resourceSchema
 * @static
 * @for @warp-drive/core-types
 * @param {ResourceSchema} schema
 * @return {ResourceSchema} the passed in schema
 * @public
 */
function resourceSchema(schema) {
  return schema;
}

/**
 * A no-op type utility that enables type-checking object schema
 * definitions.
 *
 * Will return the passed in schema.
 *
 * @method objectSchema
 * @static
 * @for @warp-drive/core-types
 * @param {ObjectSchema} schema
 * @return {ObjectSchema} the passed in schema
 * @public
 */
function objectSchema(schema) {
  return schema;
}

/**
 * A type utility to narrow a schema to a ResourceSchema
 *
 * @method isResourceSchema
 * @static
 * @for @warp-drive/core-types
 * @param schema
 * @return {boolean}
 * @public
 */
function isResourceSchema(schema) {
  return schema?.identity?.kind === '@id';
}

/**
 * A type utility to narrow a schema to LegacyResourceSchema
 *
 * @method isLegacyResourceSchema
 * @static
 * @for @warp-drive/core-types
 * @param schema
 * @return {boolean}
 * @public
 */
function isLegacyResourceSchema(schema) {
  return isResourceSchema(schema) && schema.legacy === true;
}
export { isLegacyResourceSchema, isResourceSchema, objectSchema, resourceSchema };