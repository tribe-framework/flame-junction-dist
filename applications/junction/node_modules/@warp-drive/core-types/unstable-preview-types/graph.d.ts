declare module '@warp-drive/core-types/graph' {
  import type { AddToResourceRelationshipMutation as AddResourceMutation, RemoveFromResourceRelationshipMutation as RemoveResourceMutation } from '@warp-drive/core-types/cache/mutations';
  import type { AddToResourceRelationshipOperation as AddResourceOperation, RemoveFromResourceRelationshipOperation as RemoveResourceOperation, UpdateResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';
  import type { CollectionRelationship, ResourceRelationship } from '@warp-drive/core-types/cache/relationship';
  import type { StableRecordIdentifier } from '@warp-drive/core-types/identifier';
  import type { CollectionResourceRelationship, SingleResourceRelationship } from '@warp-drive/core-types/spec/json-api-raw';
  export interface Graph {
      identifiers: Map<StableRecordIdentifier, unknown>;
      getData(identifier: StableRecordIdentifier, field: string): ResourceRelationship | CollectionRelationship;
      remove(identifier: StableRecordIdentifier): void;
      registerPolymorphicType(abstract: string, concrete: string): void;
      destroy(): void;
  }
  export interface Operation {
      op: string;
  }
  export interface UpdateRelationshipOperation {
      op: 'updateRelationship';
      record: StableRecordIdentifier;
      field: string;
      value: SingleResourceRelationship | CollectionResourceRelationship;
  }
  export interface DeleteRecordOperation {
      op: 'deleteRecord';
      record: StableRecordIdentifier;
      isNew: boolean;
  }
  export interface UnknownOperation {
      op: 'never';
      record: StableRecordIdentifier;
      field: string;
  }
  export interface ReplaceRelatedRecordOperation {
      op: 'replaceRelatedRecord';
      record: StableRecordIdentifier;
      field: string;
      value: StableRecordIdentifier | null;
      prior?: StableRecordIdentifier;
      index?: number;
  }
  export interface SortRelatedRecords {
      op: 'sortRelatedRecords';
      record: StableRecordIdentifier;
      field: string;
      value: StableRecordIdentifier[];
  }
  export interface ReplaceRelatedRecordsOperation {
      op: 'replaceRelatedRecords';
      record: StableRecordIdentifier;
      field: string;
      value: StableRecordIdentifier[];
      prior?: StableRecordIdentifier[];
      index?: number;
  }
  export type RemoteRelationshipOperation = UpdateResourceRelationshipOperation | UpdateRelationshipOperation | ReplaceRelatedRecordOperation | ReplaceRelatedRecordsOperation | RemoveResourceOperation | AddResourceOperation | DeleteRecordOperation | SortRelatedRecords;
  export type LocalRelationshipOperation = ReplaceRelatedRecordsOperation | ReplaceRelatedRecordOperation | AddResourceMutation | RemoveResourceMutation | SortRelatedRecords;
}
//# sourceMappingURL=graph.d.ts.map