{"version":3,"file":"colocation.js","sourceRoot":"","sources":["colocation.ts"],"names":[],"mappings":";;AAIA,4CASC;AAED,8DAWC;AAUD,kEAEC;AAtCD,uCAAsC;AACtC,mCAAmC;AACnC,+BAA2B;AAE3B,SAAgB,gBAAgB,CAAC,MAAc;IAC7C,4EAA4E;IAC5E,0EAA0E;IAC1E,kEAAkE;IAClE,IAAI,IAAA,gBAAQ,EAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QACrC,OAAO,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,yBAAyB,CAAC,kBAA0B,EAAE,SAAiB;IACrF,kBAAkB,GAAG,IAAA,gBAAQ,EAAC,kBAAkB,CAAC,CAAC;IAClD,SAAS,GAAG,IAAA,gBAAQ,EAAC,SAAS,CAAC,CAAC;IAChC,IACE,qBAAqB,CAAC,kBAAkB,EAAE,SAAS,CAAC;QACpD,CAAC,SAAS,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;QACzD,CAAC,qBAAqB,CAAC,SAAS,CAAC,EACjC,CAAC;QACD,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACvC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,qBAAqB,CAAC,MAAc,EAAE,EAAU;IACvD,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,qBAAqB,CAAC,EAAU;IACvC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAA,qBAAU,EAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACrE,CAAC;AAED,SAAgB,2BAA2B;IACzC,OAAO,8FAA8F,CAAC;AACxG,CAAC","sourcesContent":["import { existsSync } from 'fs-extra';\nimport { cleanUrl } from './paths';\nimport { sep } from 'path';\n\nexport function syntheticJStoHBS(source: string): string | null {\n  // explicit js is the only case we care about here. Synthetic template JS is\n  // only ever JS (never TS or anything else). And extensionless imports are\n  // handled by the default resolving system doing extension search.\n  if (cleanUrl(source).endsWith('.js')) {\n    return source.replace(/\\.js(\\?.*)?$/, '.hbs$1');\n  }\n\n  return null;\n}\n\nexport function needsSyntheticComponentJS(requestedSpecifier: string, foundFile: string): string | null {\n  requestedSpecifier = cleanUrl(requestedSpecifier);\n  foundFile = cleanUrl(foundFile);\n  if (\n    discoveredImplicitHBS(requestedSpecifier, foundFile) &&\n    !foundFile.split(sep).join('/').endsWith('/template.hbs') &&\n    !correspondingJSExists(foundFile)\n  ) {\n    return foundFile.slice(0, -3) + 'js';\n  }\n  return null;\n}\n\nfunction discoveredImplicitHBS(source: string, id: string): boolean {\n  return !source.endsWith('.hbs') && id.endsWith('.hbs');\n}\n\nfunction correspondingJSExists(id: string): boolean {\n  return ['js', 'ts'].some(ext => existsSync(id.slice(0, -3) + ext));\n}\n\nexport function templateOnlyComponentSource() {\n  return `import templateOnly from '@ember/component/template-only';\\nexport default templateOnly();\\n`;\n}\n"]}