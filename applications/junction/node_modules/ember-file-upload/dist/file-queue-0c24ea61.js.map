{"version":3,"file":"file-queue-0c24ea61.js","sources":["../src/upload-file.ts","../src/queue.ts","../src/services/file-queue.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\n\nimport { upload } from './system/upload.ts';\nimport HTTPRequest from './system/http-request.ts';\nimport UploadFileReader from './system/upload-file-reader.ts';\n\nimport type { Queue } from './queue.ts';\nimport { guidFor } from '@ember/object/internals';\nimport RSVP from 'rsvp';\nimport { FileSource, FileState, type UploadOptions } from './interfaces.ts';\nimport { estimatedRate } from './system/rate.ts';\n\n/**\n * Files provide a uniform interface for interacting\n * with data that can be uploaded or read.\n */\nexport class UploadFile {\n  file: File;\n  #source: FileSource;\n\n  queue?: Queue;\n\n  constructor(file: File, source: FileSource) {\n    this.file = file;\n    this.#source = source;\n  }\n\n  /**\n   * The source of the file. This is useful\n   * for applications that want to gather\n   * analytics about how users upload their\n   * content.\n   */\n  get source(): FileSource {\n    return this.#source;\n  }\n\n  #id = `file-${guidFor(this)}`;\n\n  /** A unique id generated for this file. */\n  get id(): string {\n    return this.#id;\n  }\n\n  #name?: string;\n\n  /** The file name */\n  get name(): string {\n    return this.#name ?? this.file?.name;\n  }\n  set name(value: string) {\n    this.#name = value;\n  }\n\n  /** The current speed in ms that it takes to upload one byte */\n  get rate() {\n    return estimatedRate(this.rates);\n  }\n\n  #size = 0;\n\n  /** The size of the file in bytes. */\n  get size() {\n    return this.#size || this.file.size;\n  }\n\n  set size(value) {\n    this.#size = value;\n  }\n\n  /**\n   * The MIME type of the file.\n   *\n   * For a image file this may be `image/png`.\n   */\n  get type(): string {\n    return this.file.type;\n  }\n\n  /**\n   * Returns the appropriate file extension of\n   * the file according to the type\n   */\n  get extension(): string {\n    return this.type.split('/').slice(-1)[0] ?? '';\n  }\n\n  /**\n   * Tracks the number of bytes that had been uploaded when progress values last changed.\n   */\n  bytesWhenProgressLastUpdated = 0;\n\n  /** The number of bytes that have been uploaded to the server */\n  @tracked loaded = 0;\n\n  /**\n   * The current progress of the upload, as a percentage in the\n   * range of 0 to 100.\n   */\n  @tracked progress = 0;\n\n  /**\n   * When upload has finished this property will be set to true\n   */\n  @tracked isUploadComplete = false;\n\n  /**\n   * The current state that the file is in.\n   */\n  @tracked state: FileState = FileState.Queued;\n\n  // /**\n  //   The source of the file. This is useful\n  //   for applications that want to gather\n  //   analytics about how users upload their\n  //   content.\n\n  //   This property can be one of the following:\n\n  //   - `browse`\n  //   - `drag-and-drop`\n  //   - `web`\n  //   - `data-url`\n  //   - `blob`\n\n  //   `browse` is the source when the file is created\n  //   using the native file picker.\n\n  //   `drag-and-drop` is the source when the file was\n  //   created using drag and drop from their desktop.\n\n  //   `web` is the source when the file was created\n  //   by dragging the file from another webpage.\n\n  //   `data-url` is the source when the file is created\n  //   from a data URL using the `fromDataURL` method for\n  //   files. This usually means that the file was created\n  //   manually by the developer on behalf of the user.\n\n  //   `blob` is the source when the file is created\n  //   from a blob using the `fromBlob` method for\n  //   files. This usually means that the file was created\n  //   manually by the developer.\n\n  //   @accessor source\n  //   @type {String}\n  //   @default ''\n  //   @readonly\n  //  */\n  // source?: FileSource;\n\n  /**\n   * The timestamp of when the progress last updated in milliseconds. Used to calculate the time\n   * that has elapsed.\n   */\n  timestampWhenProgressLastUpdated = 0;\n\n  @tracked rates: number[] = [];\n\n  /**\n   * Upload file with `application/octet-stream` content type.\n   *\n   * @param url Your server endpoint where to upload the file\n   * @param options additional request options\n   */\n  uploadBinary(url: string, options: UploadOptions) {\n    options.contentType = 'application/octet-stream';\n    return upload(this, url, options, (request) => {\n      this.queue?.uploadStarted(this);\n      return request.send(this.file);\n    });\n  }\n\n  /**\n   * Upload file to your server\n   *\n   * @param url Your server endpoint where to upload the file\n   * @param options additional options, eg. `{ fileKey: string, data: { key: string } }`\n   */\n  upload(url: string, options?: UploadOptions) {\n    return upload(\n      this,\n      url,\n      options,\n      (request: HTTPRequest, opts: UploadOptions): RSVP.Promise<Response> => {\n        // Build the form\n        const form = new FormData();\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        for (const key of Object.keys(opts.data)) {\n          if (key === opts.fileKey) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            form.append(key, opts.data[key], this.name);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            form.append(key, opts.data[key]);\n          }\n        }\n\n        this.queue?.uploadStarted(this);\n        return request.send(form);\n      },\n    );\n  }\n\n  /**\n   * Resolves with Blob as ArrayBuffer\n   */\n  readAsArrayBuffer() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as an ArrayBuffer`,\n    });\n    return reader.readAsArrayBuffer(this.file);\n  }\n\n  /**\n   * Resolves with Blob as DataURL\n   */\n  readAsDataURL() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as a Data URI`,\n    });\n    return reader.readAsDataURL(this.file);\n  }\n\n  /**\n   * Resolves with Blob as binary string\n   */\n  readAsBinaryString() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as a binary string`,\n    });\n    return reader.readAsBinaryString(this.file);\n  }\n\n  /**\n   * Resolves with Blob as plain text\n   */\n  readAsText() {\n    const reader = new UploadFileReader({ label: `Read ${this.name} as text` });\n    return reader.readAsText(this.file);\n  }\n\n  /**\n   * Creates a file object that can be read or uploaded to a\n   * server from a Blob object.\n   *\n   * @param blob the blob to create the file from.\n   * @param source the source that created the blob.\n   * @returns the file\n   */\n  static fromBlob(blob: Blob, source = FileSource.Blob) {\n    const file = new File([blob], 'blob', { type: blob.type });\n    return new this(file, source);\n  }\n\n  /**\n   * Creates a file object that can be read or uploaded to a\n   * server from a data URL.\n   *\n   * @param dataURL the data URL to create the file from.\n   * @param source the source of the data URL.\n   * @returns the file\n   */\n  static fromDataURL(dataURL: string, source = FileSource.DataUrl) {\n    const [typeInfo, base64String] = dataURL.split(',');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const mimeType = typeInfo.match(/:(.*?);/)[1];\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const binaryString = atob(base64String);\n    const binaryData = new Uint8Array(binaryString.length);\n\n    for (let i = 0, len = binaryString.length; i < len; i++) {\n      binaryData[i] = binaryString.charCodeAt(i);\n    }\n\n    const blob = new Blob([binaryData], { type: mimeType });\n\n    return this.fromBlob(blob, source);\n  }\n}\n","import { action } from '@ember/object';\nimport { modifier } from 'ember-modifier';\nimport { TrackedSet } from 'tracked-built-ins';\nimport { UploadFile } from './upload-file.ts';\nimport type FileQueueService from './services/file-queue.ts';\nimport {\n  FileSource,\n  FileState,\n  type QueueListener,\n  type QueueName,\n  type SelectFileSignature,\n} from './interfaces.ts';\n\n/**\n * The Queue is a collection of files that\n * are being manipulated by the user.\n *\n * Queues are designed to persist the state\n * of uploads when a user navigates around your\n * application.\n */\nexport class Queue {\n  #listeners: Set<QueueListener> = new Set();\n\n  #name: QueueName;\n\n  /**\n   * The unique identifier of the queue.\n   *\n   * @remarks\n   * Queue names should be deterministic so they\n   * can be retrieved. It's recommended to provide\n   * a helpful name.\n   *\n   * If the queue belongs to a top level collection,\n   * photos, the good name for this queue may be `\"photos\"`.\n   *\n   * If you're uploading images to an artwork, the\n   * best name would incoporate both `\"artworks\"` and\n   * the identifier of the artwork. A good name for this\n   * queue may be `\"artworks/{{id}}/photos\"`, where `{{id}}`\n   * is a dynamic segment that is generated from the artwork id.\n   */\n  get name(): QueueName {\n    return this.#name;\n  }\n\n  /** The FileQueue service. */\n  fileQueue: FileQueueService;\n\n  #distinctFiles: Set<UploadFile> = new TrackedSet();\n\n  /**\n   * The list of files in the queue. This automatically gets\n   * flushed when all the files in the queue have settled.\n   *\n   * @remarks\n   * Note that files that have failed need to be manually\n   * removed from the queue. This is so they can be retried\n   * without resetting the state of the queue, orphaning the\n   * file from its queue. Upload failures can happen due to a\n   * timeout or a server response. If you choose to use the\n   * `abort` method, the file will fail to upload, but will\n   * be removed from the requeuing proccess, and will be\n   * considered to be in a settled state.\n   *\n   * @defaultValue []\n   */\n  get files(): UploadFile[] {\n    return [...this.#distinctFiles.values()];\n  }\n\n  /**\n   * The current time in ms it is taking to upload 1 byte.\n   *\n   * @defaultValue 0\n   */\n  get rate(): number {\n    return this.files\n      .filter((file) => file.state === FileState.Uploading)\n      .reduce((acc, { rate }) => {\n        return acc + rate;\n      }, 0);\n  }\n\n  /**\n   * The total size of all files currently being uploaded in bytes.\n   *\n   * @defaultValue 0\n   */\n  get size(): number {\n    return this.files.reduce((acc, { size }) => {\n      return acc + size;\n    }, 0);\n  }\n\n  /**\n   * The number of bytes that have been uploaded to the server.\n   *\n   * @defaultValue 0\n   */\n  get loaded(): number {\n    return this.files.reduce((acc, { loaded }) => {\n      return acc + loaded;\n    }, 0);\n  }\n\n  /**\n   * The current progress of all uploads, as a percentage in the\n   * range of 0 to 100.\n   *\n   * @defaultValue 0\n   */\n  get progress() {\n    const percent = this.loaded / this.size || 0;\n    return Math.floor(percent * 100);\n  }\n\n  constructor({\n    name,\n    fileQueue,\n  }: {\n    name: QueueName;\n    fileQueue: FileQueueService;\n  }) {\n    this.#name = name;\n    this.fileQueue = fileQueue;\n  }\n\n  addListener(listener: QueueListener) {\n    this.#listeners.add(listener);\n  }\n\n  removeListener(listener: QueueListener) {\n    this.#listeners.delete(listener);\n  }\n\n  /**\n   * Add a file to the queue\n   * @param file the file to be added\n   */\n  @action\n  add(file: UploadFile) {\n    if (this.#distinctFiles.has(file)) {\n      return;\n    }\n\n    file.queue = this;\n    this.#distinctFiles.add(file);\n\n    for (const listener of this.#listeners) {\n      listener.onFileAdded?.(file);\n    }\n  }\n\n  /**\n   * Remove a file from the queue\n   * @param file the file to be removed\n   */\n  @action\n  remove(file: UploadFile) {\n    if (!this.#distinctFiles.has(file)) {\n      return;\n    }\n\n    file.queue = undefined;\n    this.#distinctFiles.delete(file);\n\n    for (const listener of this.#listeners) {\n      listener.onFileRemoved?.(file);\n    }\n  }\n\n  uploadStarted(file: UploadFile) {\n    for (const listener of this.#listeners) {\n      listener.onUploadStarted?.(file);\n    }\n  }\n\n  uploadSucceeded(file: UploadFile, response: Response) {\n    for (const listener of this.#listeners) {\n      listener.onUploadSucceeded?.(file, response);\n    }\n  }\n\n  uploadFailed(file: UploadFile, response: Response) {\n    for (const listener of this.#listeners) {\n      listener.onUploadFailed?.(file, response);\n    }\n  }\n\n  /**\n   * Flushes the `files` property if they have settled. This\n   * will only flush files when all files have arrived at a terminus\n   * of their state chart (`uploaded` and `aborted`).\n   *\n   * Files *may* be requeued by the user in the `failed` or `timed_out`\n   * states.\n   */\n  flush() {\n    if (this.files.length === 0) {\n      return;\n    }\n\n    const allFilesHaveSettled = this.files.every((file) => {\n      return [FileState.Uploaded, FileState.Aborted].includes(file.state);\n    });\n\n    if (allFilesHaveSettled) {\n      this.files.forEach((file) => (file.queue = undefined));\n      this.#distinctFiles.clear();\n    }\n  }\n\n  selectFile = modifier<SelectFileSignature>(\n    (element, _positional, { filter, onFilesSelected }) => {\n      const changeHandler = (event: Event) => {\n        const { files: fileList } = event.target as HTMLInputElement;\n        if (!fileList) {\n          return;\n        }\n\n        const files = Array.from(fileList);\n        const selectedFiles: UploadFile[] = [];\n\n        for (const file of files) {\n          if (filter && !filter?.(file, files, files.indexOf(file))) {\n            continue;\n          }\n\n          let uploadFile;\n          if (file instanceof File) {\n            uploadFile = new UploadFile(file, FileSource.Browse);\n          }\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          else if (file instanceof Blob) {\n            uploadFile = UploadFile.fromBlob(file, FileSource.Browse);\n          }\n\n          if (uploadFile) {\n            selectedFiles.push(uploadFile);\n            this.add(uploadFile);\n          }\n        }\n\n        onFilesSelected?.(selectedFiles);\n\n        // this will reset the input, so the _same_ file can be picked again\n        // Without, the `change` event wouldn't be fired, as it is still the same\n        // value\n        element.value = '';\n      };\n      element.addEventListener('change', changeHandler);\n\n      return () => {\n        element.removeEventListener('change', changeHandler);\n      };\n    },\n    // used to opt-in to lazy argument handling, which is the default for ember-modifier@^4\n    { eager: false },\n  );\n}\n","import { assert } from '@ember/debug';\nimport Service from '@ember/service';\nimport { registerDestructor } from '@ember/destroyable';\nimport { Queue } from '../queue.ts';\nimport type { UploadFile } from '../upload-file.ts';\nimport { FileState, type QueueName } from '../interfaces.ts';\nimport { TrackedMap } from 'tracked-built-ins';\n\nexport const DEFAULT_QUEUE = Symbol('DEFAULT_QUEUE');\n\n/**\n * The file queue service is a global file\n * queue that manages all files being uploaded.\n *\n * This service can be used to query the current\n * upload state when a user leaves the app,\n * asking them whether they want to cancel\n * the remaining uploads.\n */\nexport default class FileQueueService extends Service {\n  queues: TrackedMap<QueueName, Queue> = new TrackedMap();\n\n  /**\n   * Identical untracked map to avoid mutating tracked state during rendering\n   * when checking for existing queues.\n   */\n  #queues: Map<QueueName, Queue> = new Map();\n\n  constructor() {\n    super();\n    // Create default queue the first time this service is accessed and instantiated\n    // Helps to avoid backtracking re-render issues\n    this.create(DEFAULT_QUEUE);\n  }\n\n  /**\n   * Returns a queue with the given name\n   *\n   * @param name The name of the queue to find\n   * @returns The queue if it exists\n   */\n  find(name: QueueName): Queue | undefined {\n    return this.#queues.get(name);\n  }\n\n  /**\n   * Create a new queue with the given name.\n   *\n   * @param name The name of the queue to create\n   * @returns The new queue.\n   */\n  create(name: QueueName): Queue {\n    assert(\n      `Queue names are required to be unique. \"${String(\n        name,\n      )}\" has already been reserved.`,\n      !this.#queues.has(name),\n    );\n\n    const queue = new Queue({ name, fileQueue: this });\n\n    registerDestructor(queue, () => {\n      this.#queues.delete(name);\n      this.queues.delete(name);\n    });\n\n    this.#queues.set(name, queue);\n    this.queues.set(name, queue);\n    return queue;\n  }\n\n  findOrCreate(name: QueueName): Queue {\n    return this.find(name) ?? this.create(name);\n  }\n\n  /**\n   * The list of all files in queues. This automatically gets\n   * flushed when all the files in the queue have settled.\n   *\n   * @remarks\n   * Note that files that have failed need to be manually\n   * removed from the queue. This is so they can be retried\n   * without resetting the state of the queue, orphaning the\n   * file from its queue. Upload failures can happen due to a\n   * timeout or a server response. If you choose to use the\n   * `abort` method, the file will fail to upload, but will\n   * be removed from the requeuing proccess, and will be\n   * considered to be in a settled state.\n   *\n   * @defaultValue []\n   */\n  get files(): UploadFile[] {\n    return [...this.queues.values()].reduce((acc: UploadFile[], queue) => {\n      return [...acc, ...queue.files];\n    }, []);\n  }\n\n  /**\n   * The current time in ms it is taking to upload 1 byte.\n   *\n   * @defaultValue 0\n   */\n  get rate(): number {\n    return this.files\n      .filter((file) => file.state === FileState.Uploading)\n      .reduce((acc, { rate }) => {\n        return acc + rate;\n      }, 0);\n  }\n\n  /**\n   * The total size of all files currently being uploaded in bytes.\n   *\n   * @defaultValue 0\n   */\n  get size(): number {\n    return this.files.reduce((acc, { size }) => {\n      return acc + size;\n    }, 0);\n  }\n\n  /**\n   * The number of bytes that have been uploaded to the server.\n   *\n   * @defaultValue 0\n   */\n  get loaded(): number {\n    return this.files.reduce((acc, { loaded }) => {\n      return acc + loaded;\n    }, 0);\n  }\n\n  /**\n   * The current progress of all uploads, as a percentage in the\n   * range of 0 to 100.\n   *\n   * @defaultValue 0\n   */\n  get progress(): number {\n    const percent = this.loaded / this.size || 0;\n    return Math.floor(percent * 100);\n  }\n}\n"],"names":["UploadFile","_class","_source","WeakMap","_id","_name","_size","constructor","file","source","_defineProperty","_classPrivateFieldInitSpec","guidFor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_classPrivateFieldSet","_classPrivateFieldGet","id","name","value","rate","estimatedRate","rates","size","type","extension","split","slice","uploadBinary","url","options","contentType","upload","request","queue","uploadStarted","send","opts","form","FormData","key","Object","keys","data","fileKey","append","readAsArrayBuffer","reader","UploadFileReader","label","readAsDataURL","readAsBinaryString","readAsText","fromBlob","blob","FileSource","Blob","File","fromDataURL","dataURL","DataUrl","typeInfo","base64String","mimeType","match","binaryString","atob","binaryData","Uint8Array","length","i","len","charCodeAt","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","FileState","Queued","Queue","_listeners","_distinctFiles","files","values","filter","state","Uploading","reduce","acc","loaded","progress","percent","Math","floor","fileQueue","Set","TrackedSet","modifier","element","_positional","onFilesSelected","changeHandler","event","fileList","target","Array","from","selectedFiles","indexOf","uploadFile","Browse","push","add","addEventListener","removeEventListener","eager","addListener","listener","removeListener","delete","has","onFileAdded","remove","undefined","onFileRemoved","onUploadStarted","uploadSucceeded","response","onUploadSucceeded","uploadFailed","onUploadFailed","flush","allFilesHaveSettled","every","Uploaded","Aborted","includes","forEach","clear","action","getOwnPropertyDescriptor","DEFAULT_QUEUE","Symbol","_queues","FileQueueService","Service","TrackedMap","Map","create","find","get","assert","String","registerDestructor","queues","set","findOrCreate"],"mappings":"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"}